'
' Definition of all Astrobee nodes running on the robot
'

' The visibility of processors, managers and nodes is defined with:
'  - SHOW_MANAGER : show nodelet manager frames
'  - SHOW_{LLP,MLP,HLP} : show nodes belonging to the processor name
'  - SHOW_MGT : show "management" type nodes
'  - SHOW_DRV : show "driver" type nodes
'  - SHOW_COM : show "communication" type nodes
'  - SHOW_GNC : show "GN&C" type nodes
'  - SHOW_MOB : show "mobility" type nodes
'  - SHOW_LOC : show "localization" type nodes
' See macros in common.puml for more information

!include "common.puml"

' HLP
!ifdef SHOW_HLP
node HLP {
'  start_manager(hlp_management)
!ifdef SHOW_EVERY_NODE
    mgt_node([hlp_cpu_monitor]<<cpu_monitor>>)
    mgt_node([hlp_disk_monitor]<<disk_monitor>>)
!endif
    mgt_node([guest_science_manager])
    mgt_node([android_ros_bridge])
'  end_manager()
  drv_node([sci_cam_streaming])
  drv_node([audio_manager])
}
!endif

' MLP
!ifdef SHOW_MLP
node MLP {
  start_manager(mlp_communications)
    com_node([dds_ros_bridge])
  end_manager()
  start_manager(mlp_management)
    mgt_node([executive])
!ifdef SHOW_EVERY_NODE
    mgt_node([access_control])
    mgt_node([data_bagger])
!endif
  end_manager()
  start_manager(mlp_monitors)
    mgt_node([sys_monitor])
!ifdef SHOW_EVERY_NODE
    mgt_node([mlp_cpu_monitor]<<cpu_monitor>>)
    mgt_node([mlp_disk_monitor]<<disk_monitor>>)
!endif
  end_manager()
!ifdef SHOW_EVERY_NODE
  start_manager(mlp_localization)
    loc_node([localization_manager])
    loc_node([image_sampler])
  end_manager()
!endif
  start_manager(mlp_vision)
    drv_node([nav_cam]<<is_camera>>)
    drv_node([dock_cam]<<is_camera>>)
    loc_node([optical_flow])
    ' full name = lk_optical_flow
    loc_node([marker_tracking])
    loc_node([sparse_mapping])
    ' sparse_mapping is actually named localization_node in the launch file!
!ifdef SHOW_EVERY_NODE
    loc_node([nav_cam_calibration]<<calibration>>)
    loc_node([dock_cam_calibration]<<calibration>>)
!endif
  end_manager()
  start_manager(mlp_depth_cam)
    mob_node([mapper])
!ifdef SHOW_EVERY_NODE
    mob_node([planner_qp])
    loc_node([handrail_detect])
!endif
    drv_node([pico_driver])
  end_manager
  start_manager(mlp_mobility)
    mob_node([choregrapher])
!ifdef SHOW_EVERY_NODE
    mob_node([planner_trapezoidal])
    mob_node([framestore])
!endif
  end_manager()
  start_manager(mlp_behaviors)
    ' Behavior is not a real manager: each behavior actually lives in 
    ' its own manager
    mob_node([dock])
    mob_node([arm])
    mob_node([perch])
  end_manager()
  start_manager(mlp_serial)
!ifdef SHOW_EVERY_NODE
    drv_node([perching_arm])
!endif
  end_manager()
}
!endif

' LLP
!ifdef SHOW_LLP
node LLP {
!ifdef SHOW_EVERY_NODE
  start_manager(llp_monitors)
    mgt_node([llp_cpu_monitor]<<cpu_monitor>>)
    mgt_node([llp_disk_monitor]<<disk_monitor>>)
  end_manager()
!endif
  start_manager("GN&C")
    gnc_node([ctl])
    gnc_node([fam])
  end_manager()
  start_manager(llp_pmc)
    drv_node([pmc_actuator])
  end_manager()
!ifdef SHOW_EVERY_NODE
  start_manager(llp_i2c)
    drv_node([eps_driver])
    drv_node([laser])
    drv_node([signal_lights])
    drv_node([flashlight_front]<<flashlight>>)
    drv_node([flashlight_aft]<<flashlight>>)
  end_manager()
  start_manager(llp_serial)
    drv_node([speedcam])
  end_manager()
!endif
  start_manager(llp_spi)
    ' Official manager is llp_imu
    drv_node([epson_imu])
!ifdef SHOW_EVERY_NODE
    loc_node([imu_calibration])
!endif
  end_manager()
}
!endif

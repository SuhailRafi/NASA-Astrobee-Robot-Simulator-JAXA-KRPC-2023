% Copyright (c) 2017, United States Government, as represented by the
% Administrator of the National Aeronautics and Space Administration.
%
% All rights reserved.
%
% The Astrobee platform is licensed under the Apache License, Version 2.0
% (the "License"); you may not use this file except in compliance with the
% License. You may obtain a copy of the License at
%
%     http://www.apache.org/licenses/LICENSE-2.0
%
% Unless required by applicable law or agreed to in writing, software
% distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
% WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
% License for the specific language governing permissions and limitations
% under the License.

function astrobee_generate_stats(varargin)

% Options
writeStats = 0;

if ~isempty(varargin)
    t_low = varargin{1}(1);
    t_high = varargin{1}(2);
else
    t_low = -inf;
    t_high = inf;
end

%% Import From Base
% The try statement is cheesy but easy
try; out_ex_time_msg = evalin('base', 'out_ex_time_msg'); end;
try; out_cvs_reg_pulse = evalin('base', 'out_cvs_reg_pulse'); end;
try; out_cvs_landmark_msg = evalin('base', 'out_cvs_landmark_msg'); end;
try; out_cvs_optflow_msg = evalin('base', 'out_cvs_optflow_msg'); end;
try; out_cvs_handrail_msg = evalin('base', 'out_cvs_handrail_msg'); end;
try; out_cmc_msg = evalin('base', 'out_cmc_msg'); end;
try; out_imu_msg = evalin('base', 'out_imu_msg'); end;
try; out_env_msg = evalin('base', 'out_env_msg'); end;
try; out_vpp_msg = evalin('base', 'out_vpp_msg'); end;
try; out_bpm_msg = evalin('base', 'out_bpm_msg'); end;
try; out_kfl_msg = evalin('base', 'out_kfl_msg'); end;
try; out_kfl_P = evalin('base', 'out_kfl_P'); end;
try; out_cmd_msg = evalin('base', 'out_cmd_msg'); end;
try; out_act_msg_vpp = evalin('base', 'out_act_msg_vpp'); end;
try; out_act_msg = evalin('base', 'out_act_msg'); end;
try; out_ctl_msg = evalin('base', 'out_ctl_msg'); end;
astrobee_version = evalin('base', 'astrobee_version');
simData = evalin('base', 'simData');
try; current_file_name = evalin('base', 'current_file_name'); end;
try; calcData = evalin('base', 'calcData'); end;



%% Stats
% Dependent on current_file_name having been generated by
% astrobee_load_p3_data.m

if simData
    titleParsed = {datestr(now, 30)};
else
    titleParsed = strsplit(current_file_name, '_');
end

% Stats
fid_array = 1;
if writeStats
    fid_array = [fid_array fopen([titleParsed{1} '_stats.txt'], 'w')];
end

for ii = 1:length(fid_array)
    
        fprintf(fid_array(ii),'\n');
        fprintf(fid_array(ii),'True Position Error Stats:\n');
        fprintf(fid_array(ii),'Max  Error (m): %f, %f, %f\n', maxerror(calcData.error.pos.total.timeRange(t_low,t_high)));
        fprintf(fid_array(ii),'Mean (m): %f, %f, %f\n', mean(calcData.error.pos.total.timeRange(t_low,t_high)));
        fprintf(fid_array(ii),'Mean + 3 Sigma (m): %f, %f, %f\n', mean3sig(calcData.error.pos.total.timeRange(t_low,t_high)));
        fprintf(fid_array(ii),'Standard Deviation (m): %f, %f, %f\n\n', std(calcData.error.pos.total.timeRange(t_low,t_high)));
        
        % Calc Euler as well
        fprintf(fid_array(ii),'True Attitude Error Stats:\n');
        fprintf(fid_array(ii),'Max  Error (deg): %f\n', maxerror(timeRange(calcData.error.att.total_mag.convert_rad2deg, t_low, t_high)));
        fprintf(fid_array(ii),'Mean (deg): %f\n', mean(timeRange(calcData.error.att.total_mag.convert_rad2deg,t_low, t_high)));
        fprintf(fid_array(ii),'Mean + 3 Sigma (deg): %f\n', mean3sig(timeRange(calcData.error.att.total_mag.convert_rad2deg, t_low,t_high)));
        fprintf(fid_array(ii),'Standard Deviation (deg): %f\n\n', std(timeRange(calcData.error.att.total_mag.convert_rad2deg, t_low, t_high)));
   
    
    
        fprintf(fid_array(ii),'Position Knowledge Error Stats:\n');
        fprintf(fid_array(ii),'Max  Error (m): %f, %f, %f\n', maxerror(calcData.error.pos.knowledge.timeRange(t_low,t_high)));
        fprintf(fid_array(ii),'Mean (m): %f, %f, %f\n', mean(calcData.error.pos.knowledge.timeRange(t_low,t_high)));
        fprintf(fid_array(ii),'Mean + 3 Sigma (m): %f, %f, %f\n', mean3sig(calcData.error.pos.knowledge.timeRange(t_low,t_high)));
        fprintf(fid_array(ii),'Standard Deviation (m): %f, %f, %f\n\n', std(calcData.error.pos.knowledge.timeRange(t_low,t_high)));
        
        fprintf(fid_array(ii),'Velocity Knowledge Error Stats:\n');
        fprintf(fid_array(ii),'Max  Error (m/s): %f, %f, %f\n', maxerror(calcData.error.velocity.knowledge.timeRange(t_low,t_high)));
        fprintf(fid_array(ii),'Mean (m/s): %f, %f, %f\n', mean(calcData.error.velocity.knowledge.timeRange(t_low,t_high)));
        fprintf(fid_array(ii),'Mean + 3 Sigma (m/s): %f, %f, %f\n', mean3sig(calcData.error.velocity.knowledge.timeRange(t_low,t_high)));
        fprintf(fid_array(ii),'Standard Deviation (m/s): %f, %f, %f\n\n', std(calcData.error.velocity.knowledge.timeRange(t_low,t_high)));
        
        fprintf(fid_array(ii),'Attitude Knowledge Error Stats:\n');
        fprintf(fid_array(ii),'Max  Error (deg): %f\n', maxerror(timeRange(calcData.error.att.knowledge_mag.convert_rad2deg,t_low, t_high)));
        fprintf(fid_array(ii),'Mean (deg): %f\n', mean(timeRange(calcData.error.att.knowledge_mag.convert_rad2deg,t_low, t_high)));
        fprintf(fid_array(ii),'Mean + 3 Sigma (deg): %f\n', mean3sig(timeRange(calcData.error.att.knowledge_mag.convert_rad2deg,t_low, t_high)));
        fprintf(fid_array(ii),'Standard Deviation (deg): %f\n\n', std(timeRange(calcData.error.att.knowledge_mag.convert_rad2deg,t_low, t_high)));

   
end

if writeStats
    fclose(fid_array(2));
end


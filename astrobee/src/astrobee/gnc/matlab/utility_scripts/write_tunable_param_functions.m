% Copyright (c) 2017, United States Government, as represented by the
% Administrator of the National Aeronautics and Space Administration.
%
% All rights reserved.
%
% The Astrobee platform is licensed under the Apache License, Version 2.0
% (the "License"); you may not use this file except in compliance with the
% License. You may obtain a copy of the License at
%
%     http://www.apache.org/licenses/LICENSE-2.0
%
% Unless required by applicable law or agreed to in writing, software
% distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
% WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
% License for the specific language governing permissions and limitations
% under the License.

function write_tunable_param_functions(source_header, boolean_exceptions, output_fname, function_name, input_object_type, input_object_name)
%% Unpack the header file

% Read in the header file that contains all the tunable parameters
header_text = fileread(source_header); 

expr = '(\w+_T) (tun_\w+)(\[\d+\]|)'; % Reg expression to find all the variables denoted tun_*
tunable_vars = regexp(header_text, expr, 'tokens'); % Execute the reg expression

% model_name = regexp(header_text, 'RT_MODEL_\w+_T', 'match'); % Find the data type of the controller object
% model_name = model_name{1};
fid = fopen([output_fname '.cpp'], 'w+');
fprintf(fid, ['// Autogenerated file, see ' mfilename ' for details\n\n']);
fprintf(fid, ['#include "' output_fname '.h"\n']);
fprintf(fid, ['#include <config_reader/config_reader.h>\n' ...
    '#include <ros/console.h>\n#include <msg_conversions/msg_conversions.h>\n\n']);
fprintf(fid, '// Do config setup and add includes\n');
fprintf(fid, ['void ' function_name '(config_reader::ConfigReader* config,  ' input_object_type ' ' input_object_name ') {\n\n']);
fprintf(fid, ['  auto & p = ' input_object_name '->defaultParam;\n\n' ]);
for ii = 1:length(tunable_vars)
    % Boolean flags, look for names in the list or with _f suffix
    if ~isempty(regexp(tunable_vars{ii}{2}, '_f\>', 'ONCE')) || any(~cellfun(@isempty, strfind(boolean_exceptions, tunable_vars{ii}{2})))
        boolean_var_name =  regexp(tunable_vars{ii}{2}, 'tun_(\w+)', 'tokens'); % Extract the variable name with no tun_
        boolean_var_name = boolean_var_name{1}{1}; % extract the string from the regexp return
        var_name = tunable_vars{ii}{2}; 
        expr= ['  bool ' boolean_var_name ';\n' ...
                '  if (!config->GetBool("' var_name '", &' boolean_var_name '))\n' ...
                '  ROS_FATAL("Unspecified ' var_name '.");\n' ...
                '  p->' var_name ' = ' boolean_var_name ';'];
        
    elseif isempty(tunable_vars{ii}{3}) % Real scalar
        var_name = tunable_vars{ii}{2};
        expr = ['  if (!config->GetReal("' var_name '", &p->' var_name '))\n' ...
                    '    ROS_FATAL("Unspecified ' var_name '.");'];
    % Scalar Flag
    elseif ~isempty(tunable_vars{ii}{3}) % Real array
        var_name = tunable_vars{ii}{2};
        dims = size(evalin('base', var_name)); % Pull the dimensions from the base workspace
        if all(dims > 1) % Check to see if it is a matrix
            expr = sprintf(['  if (!msg_conversions::config_read_matrix(config, "' var_name '", %d, %d, p->%s))\n' ...
                '    ROS_FATAL("Unspecified %s.");'],dims, var_name, var_name);
        else
            var_size = eval(tunable_vars{ii}{3});
            expr = ['  if (!msg_conversions::config_read_array(config, "' var_name '", ' num2str(var_size) ' , p->' var_name '))\n' ...
                '    ROS_FATAL("Unspecified ' var_name '.");'];
        end
        
    end
    
    fprintf(fid, [expr '\n']);
    

end
% Close out the function
fprintf(fid, '}\n');
fclose(fid);
 
%% Write Header File
fid = fopen([output_fname '.h'], 'w+');
fprintf(fid, '#ifndef READ_PARAMS_CPP\n#define READ_PARAMS_CPP\n\n');
fprintf(fid, 'namespace config_reader {\n  class ConfigReader;\n}\n\n');
fprintf(fid, ['#include "' source_header '"\n']);
fprintf(fid, ['void ' function_name '(config_reader::ConfigReader* config,  ' input_object_type ' ' input_object_name ');\n\n#endif']);
fclose(fid);

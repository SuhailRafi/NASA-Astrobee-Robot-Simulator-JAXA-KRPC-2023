/* Copyright (c) 2017, United States Government, as represented by the
 * Administrator of the National Aeronautics and Space Administration.
 * 
 * All rights reserved.
 * 
 * The Astrobee platform is licensed under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with the
 * License. You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

/**
 * SIM node
 */
#include <sim_wrapper/sim.h>

#include <gflags/gflags.h>
#include <ros/ros.h>

#include <ff_common/init.h>

DEFINE_double(rate, 1.0, "Speed up time by this factor.");

int main(int argc, char** argv) {
  ff_common::InitFreeFlyerApplication(&argc, &argv);
  ros::init(argc, argv, "sim_wrapper");

  ros::NodeHandle nh("~");

  std::shared_ptr<sim_wrapper::Sim> sim(new sim_wrapper::Sim(&nh));

  double rate = FLAGS_rate;

  // Sim node is the source of the clock when it is being ran. Because of this,
  // we can not use the regular Rate objects here. We must use their respective
  // "Wall" versions because the normal stuff will hang on waiting for "/clock"
  // to be published when we are the publisher.

  // TODO(bcoltin): get IMU rate from autogenerated code
  ros::WallRate loop_rate(62.5 * rate);

  while (ros::ok()) {
    sim->Step();

    // process call backs in queue
    ros::spinOnce();

    loop_rate.sleep();
  }
}

--[[
Verification file allowing to compare old XML based defintion
going through a Matlab script for transforms, and the new
Lua config with built-in matrices functionalities.

The output of this file processed with:
  marker_config2xml
Should be equivalent to:
  localization/marker_tracking/ros/launch/granite_lab_tags.xml @ 0cb4ae9
--]]

require "rotations"
local matrix = require 'matrix'
-- Marker resolution defines the size of the inside grid
ar_resolution = 5
-- Margin defines the number of cell size to draw the borders
ar_margin = 2

-- What are the units of the drawing
drawing_unit = "mm"
-- How many decimal points to use for the output
drawing_precision = 3

-- Width and Height of the full target (in drawing_unit units)
drawing_width = 382
drawing_height = 126

drawing_xoffset = drawing_width/2.0
drawing_yoffset = drawing_height/2.0

-- Marker definition from: new_dock_targets.m
markers = {
  {id=21, size=20, pos={71, -48}},
  {id=22, size=20, pos={-91, 28}},
  {id=41, size=40, pos={91, 15}},
  {id=42, size=40, pos={-131, -55}},
  {id=96, size=96, pos={-48, -48}}
}

-- angle of a normal to the target plane with the horizontal plane,
-- positive around the X axis
dock_roll_angle = math.rad(-25)

-- angle of the dock X axis with the world X axis, around the
-- world Z axis
dock_yaw_angle = math.rad(-90)

-- dock origin expressed in world coordinate frame (meters)
dock_position = matrix{-0.7053, 0.3105, -0.8378}

-- print(string.format("Processing %d markers...", #markers))

-- Compute the corners of the target in function of its size and position
function marker_corners(m, scale)
  -- express corners in dock frame (see intro)
  top_left = scale * matrix{m['pos'][1], 0.0, m['pos'][2]}
  top_right = top_left + scale * matrix{m['size'], 0.0, 0.0}
  bottom_left = top_left + scale * matrix{0.0, 0.0, m['size']}
  return top_left, top_right, bottom_left
end

-- Compute rotation matrix to transform dock frame to world frame
roll_mat = rot_matrix(dock_roll_angle, 'x')
yaw_mat = rot_matrix(dock_yaw_angle, 'z')

Rdock2world = yaw_mat * roll_mat

-- Units transformation
if ( drawing_unit == "mm") then
  -- print("tagets drawing expressed in millimeters")
  scale_factor = 0.001
elseif ( drawing_unit =="in") then
  -- print("targets drawing are expressed in inches")
  scale_factor = 0.0254
else
  print("Warning: targets drawing unit not defined or not recognized")
  print("         assume meters")
  scale_factor = 1.0
end
scaling_mat = matrix{
  {scale_factor, 0.0, 0.0},
  {0.0, scale_factor, 0.0},
  {0.0, 0.0, scale_factor}
}

-- Processing
markers_world = {}
for k,v in pairs(markers) do
  marker_in_world = {}
  top_left, top_right, bottom_left = marker_corners(v, scale_factor)
  marker_in_world['id'] = v['id']
  top_left_world = Rdock2world * top_left + dock_position
  top_right_world = Rdock2world * top_right + dock_position
  bottom_left_world = Rdock2world * bottom_left + dock_position
  -- corners results are in Matrix form, transpose them back into a table
  marker_in_world['top_left'] = {
    top_left_world[1][1], top_left_world[2][1], top_left_world[3][1] }
  marker_in_world['top_right'] = {
    top_right_world[1][1], top_right_world[2][1], top_right_world[3][1] }
  marker_in_world['bottom_left'] = {
    bottom_left_world[1][1], bottom_left_world[2][1], bottom_left_world[3][1] }
  table.insert(markers_world, marker_in_world)
end

--[[
Reference XML file @ 0cb4ae9
<ar id="21"
    topleft="-0.726 0.239 -0.881"
    topright="-0.726 0.220 -0.881"
    bottomleft="-0.717 0.239 -0.863"
    />
<ar id="22"
    topleft="-0.693 0.401 -0.812"
    topright="-0.693 0.382 -0.812"
    bottomleft="-0.685 0.401 -0.794"
    />
<ar id="41"
    topleft="-0.699 0.220 -0.824"
    topright="-0.699 0.179 -0.824"
    bottomleft="-0.682 0.220 -0.788"
    />
<ar id="42"
    topleft="-0.729 0.442 -0.888"
    topright="-0.729 0.401 -0.888"
    bottomleft="-0.712 0.442 -0.851"
    />
<ar id="96"
    topleft="-0.726 0.358 -0.881"
    topright="-0.726 0.263 -0.881"
    bottomleft="-0.685 0.358 -0.794"
    />

--]]

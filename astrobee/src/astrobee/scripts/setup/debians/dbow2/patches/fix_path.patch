Index: libdbow2/CMakeLists.txt
===================================================================
--- libdbow2.orig/CMakeLists.txt
+++ libdbow2/CMakeLists.txt
@@ -42,40 +42,51 @@ include_directories(${OpenCV_INCLUDE_DIR
 find_package(Boost REQUIRED)
 include_directories(${Boost_INCLUDE_DIR})
 
-find_package(DLib QUIET 
-  PATHS ${DEPENDENCY_INSTALL_DIR})
-if(${DLib_FOUND})
+find_package(dlib REQUIRED)
+if(${dlib_FOUND})
   message("DLib library found, using it from the system")
-  include_directories(${DLib_INCLUDE_DIRS})
+  message("${DLIB_INCLUDE_DIRS}")
+  include_directories(${DLIB_INCLUDE_DIRS})
   add_custom_target(Dependencies)
-else(${DLib_FOUND})
-  message("DLib library not found in the system, it will be downloaded on build")
-  option(DOWNLOAD_DLib_dependency "Download DLib dependency" ON)
-  if(${DOWNLOAD_DLib_dependency})
-    set(EXTRA_ARGS "-DCMAKE_INSTALL_PREFIX=<INSTALL_DIR> ")
-    ExternalProject_Add(DLib
-      PREFIX ${DEPENDENCY_DIR}
-      GIT_REPOSITORY http://github.com/dorian3d/DLib
-      GIT_TAG v1.1-free
-      INSTALL_DIR ${DEPENDENCY_INSTALL_DIR}
-      CMAKE_ARGS ${EXTRA_ARGS})
-    add_custom_target(Dependencies ${CMAKE_COMMAND} ${CMAKE_SOURCE_DIR} DEPENDS DLib)
-    include_directories("${DEPENDENCY_INSTALL_DIR}/include/DLib")
-  else()
-    message(SEND_ERROR "Please, activate DOWNLOAD_DLib_dependency option or download manually")
-  endif(${DOWNLOAD_DLib_dependency})
-endif(${DLib_FOUND})
+else(${dlib_FOUND})
+  #message("DLib library not found in the system, it will be downloaded on build")
+  #option(DOWNLOAD_DLib_dependency "Download DLib dependency" ON)
+  #if(${DOWNLOAD_DLib_dependency})
+  #  set(EXTRA_ARGS "-DCMAKE_INSTALL_PREFIX=<INSTALL_DIR> ")
+  #  ExternalProject_Add(DLib_ext
+  #    PREFIX ${DEPENDENCY_DIR}
+  #    GIT_REPOSITORY http://github.com/dorian3d/DLib
+  #    GIT_TAG v1.1-free
+  #    INSTALL_DIR ${DEPENDENCY_INSTALL_DIR}
+  #    CMAKE_ARGS ${EXTRA_ARGS})
+  #  add_custom_target(Dependencies ${CMAKE_COMMAND} ${CMAKE_SOURCE_DIR} DEPENDS DLib_ext)
+  #  set(DLIB_LIBRARY ${DEPENDENCY_INSTALL_DIR}/lib/libDLib${CMAKE_SHARED_LIBRARY_SUFFIX})
+  #  include_directories("${DEPENDENCY_INSTALL_DIR}/include/DLib")
+  #else()
+  #  message(SEND_ERROR "Please, activate DOWNLOAD_DLib_dependency option or download manually")
+  #endif(${DOWNLOAD_DLib_dependency})
+  #add_library(DLib UNKNOWN IMPORTED )
+  #set_property(TARGET DLib PROPERTY IMPORTED_LOCATION "${DLIB_LIBRARY}" )
+  ##set_property(TARGET DLib PROPERTY INTERFACE_INCLUDE_DIRECTORIES "${CERES_INCLUDE_DIR}")
+  #
+  #IF(CERES_FOUND)
+  #  SET(CERES_LIBRARIES ${CERES_LIBRARY})
+  #  SET(CERES_LIBRARIES ceres)
+  #  SET(CERES_INCLUDE_DIRS ${CERES_INCLUDE_DIR})
+  #ENDIF(CERES_FOUND)
+  message(SEND_ERROR "DLib is not installed.")
+endif(${dlib_FOUND})
 
 if(BUILD_DBoW2)
   add_library(${PROJECT_NAME} SHARED ${SRCS})
   include_directories(include/DBoW2/)
   add_dependencies(${PROJECT_NAME} Dependencies)
-  target_link_libraries(${PROJECT_NAME} ${OpenCV_LIBS} ${DLib_LIBS})
+  target_link_libraries(${PROJECT_NAME} ${OpenCV_LIBS} ${DLIB_LIBRARIES})
 endif(BUILD_DBoW2)
 
 if(BUILD_Demo)
   add_executable(demo demo/demo.cpp)
-  target_link_libraries(demo ${PROJECT_NAME} ${OpenCV_LIBS} ${DLib_LIBS})
+  target_link_libraries(demo ${PROJECT_NAME} ${OpenCV_LIBS} ${DLIB_LIBRARIES})
   file(COPY demo/images DESTINATION ${CMAKE_BINARY_DIR}/)
 endif(BUILD_Demo)
 

Fix eigen alignemnt in std::vector for essential matrix.
Index: libopenmvg-1.1/src/openMVG/multiview/solver_essential_five_point.cpp
===================================================================
--- libopenmvg-1.1.orig/src/openMVG/multiview/solver_essential_five_point.cpp
+++ libopenmvg-1.1/src/openMVG/multiview/solver_essential_five_point.cpp
@@ -169,7 +169,7 @@ Mat FivePointsPolynomialConstraints(cons
 
 void FivePointsRelativePose(const Mat2X &x1,
                             const Mat2X &x2,
-                            vector<Mat3> *Es) {
+                            vector<Mat3, Eigen::aligned_allocator<Mat3> > *Es) {
   // Step 1: Nullspace Extraction.
   const Eigen::Matrix<double, 9, 4> E_basis = FivePointsNullspaceBasis(x1, x2);
 
Index: libopenmvg-1.1/src/openMVG/multiview/solver_essential_five_point.hpp
===================================================================
--- libopenmvg-1.1.orig/src/openMVG/multiview/solver_essential_five_point.hpp
+++ libopenmvg-1.1/src/openMVG/multiview/solver_essential_five_point.hpp
@@ -57,7 +57,7 @@ using namespace std;
  * \param E  A list of at most 10 candidate essential matrix solutions.
  */
 void FivePointsRelativePose( const Mat2X &x1, const Mat2X &x2,
-                             vector<Mat3> *E );
+                             vector<Mat3, Eigen::aligned_allocator<Mat3> > *E );
 
 /**
 * @brief Compute the nullspace of the linear constraints given by the matches.
Index: libopenmvg-1.1/src/openMVG/multiview/solver_essential_kernel.cpp
===================================================================
--- libopenmvg-1.1.orig/src/openMVG/multiview/solver_essential_kernel.cpp
+++ libopenmvg-1.1/src/openMVG/multiview/solver_essential_kernel.cpp
@@ -65,7 +65,7 @@ void EightPointRelativePoseSolver::Solve
   Es->push_back(E);
 }
 
-void FivePointSolver::Solve(const Mat &x1, const Mat &x2, vector<Mat3> *E) {
+void FivePointSolver::Solve(const Mat &x1, const Mat &x2, vector<Mat3, Eigen::aligned_allocator<Mat3> > *E) {
   assert(2 == x1.rows());
   assert(5 <= x1.cols());
   assert(x1.rows() == x2.rows());
Index: libopenmvg-1.1/src/openMVG/multiview/solver_essential_kernel.hpp
===================================================================
--- libopenmvg-1.1.orig/src/openMVG/multiview/solver_essential_kernel.hpp
+++ libopenmvg-1.1/src/openMVG/multiview/solver_essential_kernel.hpp
@@ -59,7 +59,7 @@ struct EightPointRelativePoseSolver {
 struct FivePointSolver {
   enum { MINIMUM_SAMPLES = 5 };
   enum { MAX_MODELS = 10 };
-  static void Solve(const Mat &x1, const Mat &x2, std::vector<Mat3> *E);
+  static void Solve(const Mat &x1, const Mat &x2, std::vector<Mat3, Eigen::aligned_allocator<Mat3> > *E);
 };
 
 //-- Generic Solver for the 5pt Essential Matrix Estimation.
Index: libopenmvg-1.1/src/openMVG/multiview/triangulation_nview.hpp
===================================================================
--- libopenmvg-1.1.orig/src/openMVG/multiview/triangulation_nview.hpp
+++ libopenmvg-1.1/src/openMVG/multiview/triangulation_nview.hpp
@@ -51,6 +51,7 @@ namespace openMVG {
   //Iterated linear method
   class Triangulation
   {
+    EIGEN_MAKE_ALIGNED_OPERATOR_NEW;
     public:
 
     size_t size() const;
@@ -84,7 +85,8 @@ namespace openMVG {
       mutable double zmin; // min depth, mutable since modified in compute(...) const;
       mutable double zmax; // max depth, mutable since modified in compute(...) const;
       mutable double err;  // re-projection error, mutable since modified in compute(...) const;
-      std::vector< std::pair<Mat34, Vec2> > views; // Proj matrix and associated image point
+      std::vector< std::pair<Mat34, Vec2>,
+        Eigen::aligned_allocator<std::pair<Mat34, Vec2> > > views; // Proj matrix and associated image point
   };
 
 }  // namespace openMVG
Index: libopenmvg-1.1/src/openMVG/multiview/two_view_kernel.hpp
===================================================================
--- libopenmvg-1.1.orig/src/openMVG/multiview/two_view_kernel.hpp
+++ libopenmvg-1.1/src/openMVG/multiview/two_view_kernel.hpp
@@ -95,7 +95,7 @@ class Kernel {
     return x1_.cols();
   }
   /// Compute a model on sampled datum
-  static void Solve(const Mat &x1, const Mat &x2, vector<Model> *models) {
+  static void Solve(const Mat &x1, const Mat &x2, vector<Model, Eigen::aligned_allocator<Model> > *models) {
     // By offering this, Kernel types can be passed to templates.
     Solver::Solve(x1, x2, models);
   }
Index: libopenmvg-1.1/src/openMVG/robust_estimation/robust_estimator_ACRansac.hpp
===================================================================
--- libopenmvg-1.1.orig/src/openMVG/robust_estimation/robust_estimator_ACRansac.hpp
+++ libopenmvg-1.1/src/openMVG/robust_estimation/robust_estimator_ACRansac.hpp
@@ -385,7 +385,7 @@ std::pair<double, double> ACRANSAC
       UniformSample(sizeSample, nData, &vec_sample);
 
     // Fit model(s). Can find up to Kernel::MAX_MODELS solution(s)
-    std::vector<typename Kernel::Model> vec_models;
+    std::vector<typename Kernel::Model, Eigen::aligned_allocator<typename Kernel::Model> > vec_models;
     kernel.Fit(vec_sample, &vec_models);
 
     // Evaluate model(s)
Index: libopenmvg-1.1/src/openMVG/robust_estimation/robust_estimator_ACRansacKernelAdaptator.hpp
===================================================================
--- libopenmvg-1.1.orig/src/openMVG/robust_estimation/robust_estimator_ACRansacKernelAdaptator.hpp
+++ libopenmvg-1.1/src/openMVG/robust_estimation/robust_estimator_ACRansacKernelAdaptator.hpp
@@ -78,7 +78,7 @@ public:
   enum { MINIMUM_SAMPLES = Solver::MINIMUM_SAMPLES };
   enum { MAX_MODELS = Solver::MAX_MODELS };
 
-  void Fit(const std::vector<size_t> &samples, std::vector<Model> *models) const {
+  void Fit(const std::vector<size_t> &samples, std::vector<Model, Eigen::aligned_allocator<Model> > *models) const {
     const Mat x1 = ExtractColumns(x1_, samples);
     const Mat x2 = ExtractColumns(x2_, samples);
     Solver::Solve(x1, x2, models);
@@ -289,7 +289,7 @@ public:
   enum { MINIMUM_SAMPLES = Solver::MINIMUM_SAMPLES };
   enum { MAX_MODELS = Solver::MAX_MODELS };
 
-  void Fit(const std::vector<size_t> &samples, std::vector<Model> *models) const {
+  void Fit(const std::vector<size_t> &samples, std::vector<Model, Eigen::aligned_allocator<Model> > *models) const {
     const Mat x1 = ExtractColumns(x1k_, samples);
     const Mat x2 = ExtractColumns(x2k_, samples);
     Solver::Solve(x1, x2, models);

/*
 * Copyright (c) 2015 United States Government as represented by the 
 * Administrator of the National Aeronautics and Space Administration.
 * All Rights Reserved.
 */

#include "Message.idl"

module rapid {
  module ext {
    module astrobee {

      //@copy-c-declaration class MobilitySettingsStateTypeSupport;
      //@copy-c-declaration class MobilitySettingsStateDataWriter;
      //@copy-c-declaration class MobilitySettingsStateDataReader;
      //@copy-c-declaration struct MobilitySettingsStateSeg;

      //@copy-declaration /**
      //@copy-declaration   * The mobility settings state of Astrobee.
      //@copy-declaration   */
      valuetype MobilitySettingsState : Message {
        //@copy-c-declaration #if RTI_DDS_VERSION_MAJOR < 4 || (RTI_DDS_VERSION_MAJOR == 4  && RTI_DDS_VERSION_MINOR < 5) || (RTI_DDS_VERSION_MAJOR == 4  && RTI_DDS_VERSION_MINOR  == 5 && RTI_DDS_VERSION_RELEASE != 'f' )
        //@copy-c-declaration typedef MobilitySettingsStateTypeSupport TypeSupport;
        //@copy-c-declaration typedef MobilitySettingsStateDataWriter DataWriter;
        //@copy-c-declaration typedef MobilitySettingsStateDataReader DataReader;
        //@copy-c-declaration typedef MobilitySettingsStateSeq Seq;
        //@copy-c-declaration #endif
        //@copy-c-declaration typedef MobilitySettingsState Type;

        //@copy-declaration /** Defines PMC gains, hard limits, and tolerances
        //@copy-declaration   * i.e. Nominal, quiet, aggressive, etc. */
        public String32 flightMode;

        //@copy-declaration /**  Target speed in m/s */
        public float targetLinearVelocity;

        //@copy-declaration /**  Target acceleration in m/s/s */
        public float targetLinearAccel;

        //@copy-declaration /**  Target turning speed in rad/s */
        public float targetAngularVelocity;

        //@copy-declaration /**  Target turning acceleration in rad/s/s */
        public float targetAngularAccel;

        //@copy-declaration /**  The operational hard limit on the collision distance. */
        public float collisionDistance;

        //@copy-declaration /**  Allow Astrobee to fly in a direction it does not have cameras pointing. */
        public boolean enableHolonomic;

        //@copy-declaration /**  Set to false to disable checking for obstacles. */
        public boolean checkObstacles;

        //@copy-declaration /** Set to false to disable keepout checks. */
        public boolean checkKeepouts;

        //@copy-declaration /** Setting this to true allows Astrobee to
        //@copy-declaration   * auto return when battery gets low and there is
        //@copy-declaration   * a LOS. */
        public boolean enableAutoReturn;

        //@copy-declaration /** Set this to false if mobility should start the
        //@copy-declaration   * a segment based on its time stamp. */
        public boolean immediateEnabled;

        //@copy-declaration /** Sets the planner mobility uses. */
        public string planner;

        //@copy-declaration /** Setting this to true allows Astrobee to re-plan
        //@copy-declaration   * if there is an obstacle to close to the robot's
        //@copy-declaration   * forward trajectory. */
        public boolean replanningEnabled;
      };
    };
  };
};

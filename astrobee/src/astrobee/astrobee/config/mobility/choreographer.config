-- Copyright (c) 2017, United States Government, as represented by the
-- Administrator of the National Aeronautics and Space Administration.
--
-- All rights reserved.
--
-- The Astrobee platform is licensed under the Apache License, Version 2.0
-- (the "License"); you may not use this file except in compliance with the
-- License. You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-- WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-- License for the specific language governing permissions and limitations
-- under the License.

require "context"

max_replanning_attempts = 10
replanning_wait = 1.0

parameters = {
  -- PLANNING
  {
    -- This is a string that represents the planner that will be used for both
    -- MOVE and EXECUTE (see bootstrapping) commands. Currently, only two
    -- planners exist: trapezoidal and qp.
    id = "planner", reconfigurable = true, type = "string",
    default = "trapezoidal", unit = "enumeration", values = {},
    description = "Which planner should be used?"
  },
  -- GENERAL
  {
    -- Subtract a fixed time from all setpoint times such that first setpoint
    -- executes immediately. Note that a timesync delta might be added.
    id = "enable_immediate", reconfigurable = true, type = "boolean",
    default = false, unit = "boolean",
    description = "Shift timestamps to start immediately"
  }, {
    -- Map the starting time of the segment to a discrete time unit edge. This
    -- is done in conjunction with the discrete_time_unit parameter below.
    id = "enable_timesync", reconfigurable = true, type = "boolean",
    default = false, unit = "boolean",
    description = "Shift timestamps by DTU + (UTC % DTU) to enforce sync"
  },{
    -- All segments (from EXECUTE and MOVE commands) will be validated by the
    -- mapper prior to being executed. This avoids us from applying control
    -- that drives us into keep-out zones or obstacles.
    id = "enable_validation", reconfigurable = true, type = "boolean",
    default = true, unit = "boolean",
    description = "Should we validate segments before executing them"
  },{
    -- In the case of an EXECUTE command the platform's pose might not
    -- coincide with the starting pose in the plan. If this is enabled, we will
    -- plan a simple move to the starting point to avoid rejecting the command.
    id = "enable_bootstrapping", reconfigurable = true, type = "boolean",
    default = true, unit = "boolean",
    description = "Should we plan motion to first setpoint?"
  },{
    -- Applicable to both MOVE and EXECUTE commands, this flag lets us know
    -- whether to plan segments in which translation occurs along +X in the
    -- body frame. When faceforward mode is disabled (holonomic mode) the
    -- propulsion force is spread along both the rotational and translational
    -- degrees of freedom. This has interesting repercussions for the hard
    -- limits on linear/angular acceleration . To cater for this we scale the
    -- hard limits by a factor in holonomic mode before passing them to the
    -- planner (see ../flight.config). The same scaled values are used by the
    -- validation engine, which is why it is extremelt important to set the
    -- faceforward mode for both MOVE and EXECUTE commands
    id = "enable_faceforward", reconfigurable = true, type = "boolean",
    default = true, unit = "boolean",
    description = "Should planning be face-forward only?"
  },{
    -- Obstacle detection is the responsibility of the mapper, and it always
    -- being carried out unless explicitly shut down. The result of an obstacle
    -- being detected is the production of a collision message. If collision
    -- checking is enabled, the choreographer listens to this collision message
    -- and uses it to trigger replanning or stop the platform.
    id = "enable_collision_checking", reconfigurable = true, type = "boolean",
    default = true, unit = "boolean",
    description = "Should we check for collisions at run-time?"
  },{
    -- See above. When a collision is detected we can decide whether or not to
    -- replan a new segment for the platform using an updated obstacle map. in
    -- some cases we'd prefer to simply stop the pltform. This boolean switch
    -- determines whether or not replanning should be permitted.
    id = "enable_replanning", reconfigurable = true, type = "boolean",
    default = false, unit = "boolean",
    description = "If an upcoming collision is detected, should we replan?"
  },{
    -- See above.
    id = "max_replanning_attempts", reconfigurable = true, type = "integer",
    default = max_replanning_attempts, min = 1, max = 999, unit = "unitless",
    description = "The maximum amount of replanning attempts"
  },{
    id = "replanning_wait", reconfigurable = true, type = "double",
    default = replanning_wait, min = 0.0, max = 3.0, unit = "seconds",
    description = "Wait time in between replanning attempts"
  },
  -- DISCRETE TIME UNIT
  {
    -- The time buffer is the minimum amount of time between a trajectory
    -- handover and the time of a predicted collision.
    id = "discrete_time_unit", reconfigurable = true, type = "integer",
    default = 5, min = 0, max = 60, unit = "seconds",
    description = "Discrete time unit used to enforce synchronization"
  },
  -- REPLANNING TIME
  {
    -- The time buffer is the minimum amount of time between a trajectory
    -- handover and the time of a predicted collision.
    id = "time_buffer", reconfigurable = true, type = "double",
    default = 10.0, min = 0.0, max = 60.0, unit = "m/s",
    description = "Time buffer before obstacle collision (replanning only)"
  },
  -- SOFT LIMITS (ONLY applicable to MOVES)
  -- Take note that a MOVE command takes time-indexes poses for the platform. If
  -- timestamps between poses are specified, the planner will respect these
  -- timestamps unless they violate the hard limits of the platform. That is,
  -- we havve the following precedence: HARD_LIMITS > SOFT LIMITS > TIMESTAMPS
  {
    -- The desired velocity of the platform at cruise-phase. This must be less
    -- than the hard limit defined by the flight mode, or negative if you want
    -- to operate at the hard limits of the platform.
    id = "desired_vel", reconfigurable = true, type = "double",
    default = -1, min = -1.0, max = 1.0, unit = "m/s",
    description = "Soft planning limit on net linear velocity"
  },{
    -- The desired acceleration of the platform at cruise-phase. This must be
    -- less than the hard limit defined by the flight mode, or negative if you
    -- want to operate at the hard limits of the platform.
    id = "desired_accel", reconfigurable = true, type = "double",
    default = -1, min = -1.0, max = 1.0, unit = "m/s/s",
    description = "Soft planning limit on net linear acceleration"
  },{
    -- The desired angular velocity of the platform at cruise-phase. This must
    -- be less than the hard limit defined by the flight mode, or negative if
    -- you want to operate at the hard limits of the platform.
    id = "desired_omega", reconfigurable = true, type = "double",
    default = -1, min = -1.0, max = 1.0, unit = "rad/s",
    description = "Soft planning limit on net angular velocity"
  },{
    -- The desired angular acceleration of the platform at cruise-phase. This
    -- must be less than the hard limit defined by the flight mode, or negative
    -- if you want to operate at the hard limits of the platform.
    id = "desired_alpha", reconfigurable = true, type = "double",
    default = -1, min = -1.0, max = 1.0, unit = "rad/s/s",
    description = "Soft planning limit on net angular acceleration"
  },{
    -- The desired sample rate of the trajectory. It must be at least 1Hz to
    -- abide by the assumptions of our quaternion integrator. It doesn't make
    -- sense to exceed 62.5 Hz, the control rate of the platform.
    id = "desired_rate", reconfigurable = true, type = "double",
    default = 1.0, min = 1.0, max = 62.5, unit = "rad/s/s",
    description = "Desired control frequency"
  },
  -- ALREADY THERE TOLERANCES
  {
    -- When a move request is made we need to check if the sequence of poses
    -- are close to our current pose. In this case we don't have to plan or
    -- even move, and we return an ALREADY_THERE success response.
    id = "tolerance_pos", reconfigurable = true, type = "double",
    default = 0.05, min = 0.0, max = 1.0, unit = "m",
    description = "Position tolerance for checking if we are already at pose"
  },{
    -- When a move request is made we need to check if the sequence of poses
    -- are close to our current pose. In this case we don't have to plan or
    -- even move, and we return an ALREADY_THERE success response.
    id = "tolerance_att", reconfigurable = true, type = "double",
    default = 0.0872, min = 0.0, max = 3.1415, unit = "rads",
    description = "Atttitude tolerance for checking if we are already at pose"
  },
  -- SPEED GAIN TIMEOUT
  {
    id = "timeout_speed_gain", reconfigurable = false, type = "double",
    default = 30.0, min = 0.1, max = 60, unit = "seconds",
    description = "Time by which the PMCs must ramp up or down"
  },
  -- SERVICE CLIENT TIMEOUT VALUES
  {
    id = "timeout_plan", reconfigurable = false, type = "double",
    default = 10.0, min = 0.1, max = 10, unit = "seconds",
    description = "Plan action timeout"
  },{
    id = "timeout_zone_connected", reconfigurable = false, type = "double",
    default = 10.0, min = 0.1, max = 10, unit = "seconds",
    description = "Time by which the get/set zone service must be found"
  },{
    id = "timeout_register_connected", reconfigurable = false, type = "double",
    default = 10.0, min = 0.1, max = 10, unit = "seconds",
    description = "Time by which the planner register service must be found"
  -- ACTION CLIENT TIMEOUT VALUES
  },{
    id = "timeout_control_connected", reconfigurable = false, type = "double",
    default = 10.0, min = 0.1, max = 10, unit = "seconds",
    description = "Time by which the control action must be connected to"
  },{
    id = "timeout_control_active", reconfigurable = false, type = "double",
    default = 1.0, min = 0.1, max = 10, unit = "seconds",
    description = "Time by which a control goal must go active"
  },{
    id = "timeout_control_response", reconfigurable = false, type = "double",
    default = 1.0, min = 0.1, max = 10, unit = "seconds",
    description = "Time by which control feedback/response must be received"
  },{
    id = "timeout_plan_connected", reconfigurable = false, type = "double",
    default = 10.0, min = 0.1, max = 10, unit = "seconds",
    description = "Time by which the plan action must be connected to"
  },{
    id = "timeout_plan_active", reconfigurable = false, type = "double",
    default = 10.0, min = 0.1, max = 10, unit = "seconds",
    description = "Time by which a plan goal must go active"
  },{
    id = "timeout_plan_response", reconfigurable = false, type = "double",
    default = 10.0, min = 0.1, max = 10, unit = "seconds",
    description = "Time by which plan feedback/response must be received"
  },{
    id = "timeout_plan_deadline", reconfigurable = false, type = "double",
    default = 10.0, min = 0.1, max = 10, unit = "seconds",
    description = "Time by which plan response must be received"
  -- VALIDATOR
  },{
    id = "zone_file", reconfigurable = false, type = "string",
    default = world_zone_file, unit = "not applicable",
    description = "Which zone file should be used?"
  },{
    id = "zone_overwrite", reconfigurable = false, type = "boolean",
    default = true, unit = "boolean",
    description = "Allow new zones to overwrite the zone file"
  },{
    id = "tolerance_max_time", reconfigurable = false, type = "double",
    default = 3.0, unit = "seconds",
    description = "Maximum time a tolerance is acceptable"
  }
}

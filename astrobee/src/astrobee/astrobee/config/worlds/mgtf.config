-- Copyright (c) 2017, United States Government, as represented by the
-- Administrator of the National Aeronautics and Space Administration.
--
-- All rights reserved.
--
-- The Astrobee platform is licensed under the Apache License, Version 2.0
-- (the "License"); you may not use this file except in compliance with the
-- License. You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-- WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-- License for the specific language governing permissions and limitations
-- under the License.

local matrix = require 'matrix'
require "rotations"

--------------------------
--      DOCKING         --
--------------------------

-- Location of the dock and berth tilt values (in degrees)
world_dock_berth1_tilt = math.rad(0)    -- Tilt in body-frame Y
world_dock_berth2_tilt = math.rad(0)    -- Tilt in body-frame Y
world_dock_transform = transform(
  vec3(0.0, 0.0, 0.0), quat4(0.0, 0.0, 0.0, 1.0));

--------------------------
--      MOBILITY       --
--------------------------

-- Path to the file containing zones
world_zone_file = resolve_resource("zones/mgtf.bin")

--------------------------
--      LOCALIZATION    --
--------------------------

-- Sparse map
world_vision_map_filename = resolve_resource("maps/p4d.map")

-- AR Tag marker file
world_vision_ar_tag_filename = resolve_resource("granite_lab_markers.config")
-- Distance of handrail from wall plane
world_handrail_wall_min_gap = 0.06

--------------------------
--       PHYSICS        --
--------------------------

world_gravity_vector = vec3(0.0, 0.0, 9.80665);

--------------------------
--       INERTIA        --
--------------------------

-- Inertial Parameters
-- Default assumes freeflyer, no payloads, 4 batteries, measured EEl 2/26/2019
world_inertia_name = "default";
world_inertia_com = vec3(0.003713818, -0.000326347, -0.002532192);              -- Center of mass
world_inertia_mass = 9.583788668;                           -- Platform + 4 batteries
world_inertia_matrix = matrix{{0.153427995, 0, 0},
                              {0, 0.14271405, 0},
                              {0, 0, 0.162302759}};         -- Inertia matrix

--------------------------
--     FLIGHT MODES     --
--------------------------

-- Initial and default flight mode
world_initial_flight_mode = "off";
world_default_flight_mode = "nominal";

-- All possible flight modes
world_flight_modes = {
  ---------
  -- OFF --
  ---------
  {
    -- This is the key we use to access the mode through FlightModeUtils::Load("")
    name = "off";

    -- Control enabled
    control_enabled = false;

    -- Attitude Parameters
    att_kp = vec3(2.0, 2.0, 2.0); -- .4
    att_ki = vec3(0.001, 0.001, 0.001);
    omega_kd = vec3(1.6, 1.6, 1.6); -- 1.1

    -- Position Loop
    pos_kp = vec3(.6, .6, .6); --.1
    pos_ki = vec3(0.0001, 0.0001, 0.0001);
    vel_kd = vec3(1.2, 1.2, 1.2);

    -- Impeller speed enumeration (0 => disabled)
    speed_gain = 0;

    -- Tolerances
    tolerance_pos_endpoint   = 0.05;               -- Endpoint position (5 cm)
    tolerance_pos   = 0.1;                         -- Position (10 cm)
    tolerance_vel   = 0;                           -- Velocity (disabled)
    tolerance_att   = 0.1745;                      -- Attitude (10 degrees)
    tolerance_omega = 0;                           -- Omega (disabled)
    tolerance_time  = 1.0;                         -- Time (for sync check)

    -- The values below instruct the planner to generate segments that abide
    -- by kinematic constraints on linear and angular positions and velocities.
    hard_limit_vel   = 0.2000;  -- 20 cm/s
    hard_limit_accel = 0.0200;  --  5 cm/s^2
    hard_limit_omega = 0.1745;  -- 10 deg/s (in rads/s)
    hard_limit_alpha = 0.1745;  -- 10 deg/s^2 (in rads/s^2)
  },
  -------------
  -- NOMINAL --
  -------------
  {
    -- This is the key we use to access the mode through FlightModeUtils::Load("")
    name = "nominal";

    -- Control enabled
    control_enabled = true;

    -- Attitude Parameters
    att_kp = vec3(2.0, 2.0, 2.0); -- .4
    att_ki = vec3(0.001, 0.001, 0.001);
    omega_kd = vec3(1.6, 1.6, 1.6); -- 1.1

    -- Position Loop
    pos_kp = vec3(.6, .6, .6); --.1
    pos_ki = vec3(0.0001, 0.0001, 0.0001);
    vel_kd = vec3(1.2, 1.2, 1.2);

    -- Impeller speed (0 => OFF, 1 = QUIET, 2 = NOMINAL, 3 = AGGRESSIVE)
    speed = 2;

    -- Tolerances
    tolerance_pos_endpoint   = 0.05;               -- Endpoint position (5 cm)
    tolerance_pos   = 0.1;                         -- Position (10 cm)
    tolerance_vel   = 0;                           -- Velocity (disabled)
    tolerance_att   = 0.1745;                      -- Attitude (10 degrees)
    tolerance_omega = 0;                           -- Omega (disabled)
    tolerance_time  = 1.0;                         -- Time (for sync check)

    -- The values below instruct the planner to generate segments that abide
    -- by kinematic constraints on linear and angular positions and velocities.
    hard_limit_vel   = 0.2000;  -- 20 cm/s
    hard_limit_accel = 0.0200;  --  5 cm/s^2
    hard_limit_omega = 0.1745;  -- 10 deg/s (in rads/s)
    hard_limit_alpha = 0.1745;  -- 10 deg/s^2 (in rads/s^2)
  },
  ---------------
  -- DIFFICULT --
  ---------------
  {
    -- This is the key we use to access the mode through FlightModeUtils::Load("")
    name = "difficult";

    -- Control enabled
    control_enabled = true;

    -- Attitude Parameters
    att_kp = vec3(2.0, 2.0, 2.0); -- .4
    att_ki = vec3(0.001, 0.001, 0.001);
    omega_kd = vec3(1.6, 1.6, 1.6); -- 1.1

    -- Position Loop
    pos_kp = vec3(.6, .6, .6); --.1
    pos_ki = vec3(0.0001, 0.0001, 0.0001);
    vel_kd = vec3(1.2, 1.2, 1.2);

    -- Impeller speed (0 => OFF, 1 = QUIET, 2 = NOMINAL, 3 = AGGRESSIVE)
    speed = 3;

    -- Tolerances
    tolerance_pos_endpoint   = 0.1;                -- Endpoint position (5 cm)
    tolerance_pos   = 0.2;                         -- Position (20 cm)
    tolerance_vel   = 0;                           -- Velocity (disabled)
    tolerance_att   = 0.3490;                      -- Attitude (20 degrees)
    tolerance_omega = 0;                           -- Omega (disabled)
    tolerance_time  = 1.0;                         -- Time (for sync check)

    -- The values below instruct the planner to generate segments that abide
    -- by kinematic constraints on linear and angular positions and velocities.
    hard_limit_vel   = 0.4000;  -- 40 cm/s
    hard_limit_accel = 0.0400;  --  8 cm/s^2
    hard_limit_omega = 0.5236;  -- 30 deg/s (in rads/s)
    hard_limit_alpha = 0.5236;  -- 30 deg/s^2 (in rads/s^2)
  },
  -----------
  -- QUIET --
  -----------
  {
    -- This is the key we use to access the mode through FlightModeUtils::Load("")
    name = "quiet";

    -- Control enabled
    control_enabled = true;

    -- Attitude Parameters
    att_kp = vec3(2.0, 2.0, 2.0); -- .4
    att_ki = vec3(0.001, 0.001, 0.001);
    omega_kd = vec3(1.6, 1.6, 1.6); -- 1.1

    -- Position Loop
    pos_kp = vec3(.6, .6, .6); --.1
    pos_ki = vec3(0.0001, 0.0001, 0.0001);
    vel_kd = vec3(1.2, 1.2, 1.2);

    -- Impeller speed (0 => OFF, 1 = QUIET, 2 = NOMINAL, 3 = AGGRESSIVE)
    speed = 1;

    -- Tolerances
    tolerance_pos_endpoint   = 0.05;               -- Endpoint position (5 cm)
    tolerance_pos   = 0.1;                         -- Position (10 cm)
    tolerance_vel   = 0;                           -- Velocity (disabled)
    tolerance_att   = 0.1745;                      -- Attitude (10 degrees)
    tolerance_omega = 0;                           -- Omega (disabled)
    tolerance_time  = 1.0;                         -- Time (for sync check)

    -- The values below instruct the planner to generate segments that abide
    -- by kinematic constraints on linear and angular positions and velocities.
    hard_limit_vel   = 0.0200;  -- 2 mm/s
    hard_limit_accel = 0.0020;  -- 2 mm/s^2
    hard_limit_omega = 0.0174;  -- 1 deg/s (in rads/s)
    hard_limit_alpha = 0.0174;  -- 1 deg/s^2 (in rads/s^2)
  },
  ---------------
  -- PRECISION --
  ---------------
  {
    -- This is the key we use to access the mode through FlightModeUtils::Load("")
    name = "precision";

    -- Control enabled
    control_enabled = true;

    -- Attitude Parameters
    att_kp = vec3(2.0, 2.0, 2.0); -- .4
    att_ki = vec3(0.001, 0.001, 0.001);
    omega_kd = vec3(1.6, 1.6, 1.6); -- 1.1

    -- Position Loop
    pos_kp = vec3(.6, .6, .6); --.1
    pos_ki = vec3(0.0001, 0.0001, 0.0001);
    vel_kd = vec3(1.2, 1.2, 1.2);

    -- Impeller speed (0 => OFF, 1 = QUIET, 2 = NOMINAL, 3 = AGGRESSIVE)
    speed = 2;

    -- Tolerances
    tolerance_pos_endpoint   = 0.05;               -- Endpoint position (5 cm)
    tolerance_pos   = 0.1;                         -- Position (10 cm)
    tolerance_vel   = 0;                           -- Velocity (disabled)
    tolerance_att   = 0.1745;                      -- Attitude (10 degrees)
    tolerance_omega = 0;                           -- Omega (disabled)
    tolerance_time  = 1.0;                         -- Time (for sync check)

    -- The values below instruct the planner to generate segments that abide
    -- by kinematic constraints on linear and angular positions and velocities.
    hard_limit_vel   = 0.2000;  -- 20 cm/s
    hard_limit_accel = 0.0200;  --  5 cm/s^2
    hard_limit_omega = 0.1745;  -- 10 deg/s (in rads/s)
    hard_limit_alpha = 0.1745;  -- 10 deg/s^2 (in rads/s^2)
  }
}

--------------------------
--       VISUALEYEZ     --
--------------------------

-- Visualeyez grounding matrix
world_visualeyez_grounding = {
  { tcm=1, led=1, x=0.9140106314862838, y=-3.219100563007645, z=-0.6207210724524649 },
  { tcm=1, led=2, x=0.1835635587737848, y=-3.219100563007645, z=-0.2319006270806013 },
  { tcm=1, led=3, x=1.043904870248541,  y=-3.219100563007645, z= 0.6628505519526655 },
  { tcm=1, led=4, x=1.110810070079649,  y=-2.050167430479354, z=-0.2681018912672751 }
}

-- Visualeyez target matrix
world_visualeyez_targets = {
  {
    name = "",
    markers = {
      { tcm=2, led=1,  x=0.15510764,   y=0.1529461,  z=-0.12371832 },
      { tcm=2, led=9,  x=0.15510764,   y=0.1529461,  z=-0.10805668 },
      { tcm=2, led=17, x=0.15510764,   y=0.1393825,  z=-0.117475  },
      { tcm=2, led=2,  x=0.15510764,   y=0.1529461,  z=0.10805668  },
      { tcm=2, led=10, x=0.15510764,   y=0.1529461,  z=0.12371832  },
      { tcm=2, led=18, x=0.15510764,   y=0.1393825,  z=0.117475   },
      { tcm=2, led=3,  x=0.15510764,   y=-0.1529461, z=-0.12371832 },
      { tcm=2, led=11, x=0.15510764,   y=-0.1529461, z=-0.10805668 },
      { tcm=2, led=19, x=0.15510764,   y=-0.1393825, z=-0.117475  },
      { tcm=2, led=4,  x=0.15510764,   y=-0.1529461, z=0.10805668  },
      { tcm=2, led=12, x=0.15510764,   y=-0.1529461, z=0.12371832  },
      { tcm=2, led=20, x=0.15510764,   y=-0.1393825, z=0.117475   },
      { tcm=2, led=5,  x=-0.15510764,  y=0.1529461,  z=-0.12371832 },
      { tcm=2, led=13, x=-0.15510764,  y=0.1529461,  z=-0.10805668 },
      { tcm=2, led=21, x=-0.15510764,  y=0.1393825,  z=-0.117475  },
      { tcm=2, led=6,  x=-0.15510764,  y=0.1529461,  z=0.10805668  },
      { tcm=2, led=14, x=-0.15510764,  y=0.1529461,  z=0.12371832  },
      { tcm=2, led=22, x=-0.15510764,  y=0.1393825,  z=0.117475   },
      { tcm=2, led=7,  x=-0.15510764,  y=-0.1529461, z=-0.12371832 },
      { tcm=2, led=15, x=-0.15510764,  y=-0.1529461, z=-0.10805668 },
      { tcm=2, led=23, x=-0.15510764,  y=-0.1393825, z=-0.117475  },
      { tcm=2, led=8,  x=-0.15510764,  y=-0.1529461, z=0.10805668  },
      { tcm=2, led=16, x=-0.15510764,  y=-0.1529461, z=0.12371832  },
      { tcm=2, led=24, x=-0.15510764,  y=-0.1393825, z=0.117475   }
    }
  }
}

-- File to store calibration data
world_visualeyez_calibration = resolve_resource("visualeyez.bin")

--------------------------
--     VIVE     --
--------------------------

world_vive_force2d = false
world_vive_lighthouses = {
  {
    name = "lighthouse_back", serial = "2935772913",
    pose = transform(
             vec3(0.0152282, -0.923956, -1.80005),
             quat4(-0.387659, -3.34835e-05, -0.00259005, 0.921799)
           );
  },{
    name = "lighthouse_front", serial = "668207140",
    pose = transform(
             vec3(0.0152282, -0.923956, -1.80005),
             quat4(-0.387659, -3.34835e-05, -0.00259005, 0.921799)
           );
  }
}

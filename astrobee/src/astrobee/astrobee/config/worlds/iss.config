-- Copyright (c) 2017, United States Government, as represented by the
-- Administrator of the National Aeronautics and Space Administration.
--
-- All rights reserved.
--
-- The Astrobee platform is licensed under the Apache License, Version 2.0
-- (the "License"); you may not use this file except in compliance with the
-- License. You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-- WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-- License for the specific language governing permissions and limitations
-- under the License.

local matrix = require 'matrix'
require "rotations"

--------------------------
--      DOCKING         --
--------------------------

-- Location of the dock and berth tilt values (in degrees)
world_dock_berth1_tilt = math.rad(0)    -- Tilt in body-frame Y
world_dock_berth2_tilt = math.rad(0)    -- Tilt in body-frame Y
-- Dock position from first 2nd mapping activity:
-- step-docked/000001.jpg localized position: (10.0430307, -9.2807372,  4.3293442)
-- rotation: (-0.00339,        1,   0.0134,   
--            -0.00198,  -0.0134,        1,          
--            1,  0.00336,  0.00202)
-- --> back transformed to body + berth
world_dock_transform = transform(
  vec3(9.5868938, -10.0604698, 4.2955872), quat4(0.0, 0.0, 0.0, 1.0));

--------------------------
--      MOBILITY       --
--------------------------

-- Path to the file containing zones
world_zone_file = resolve_resource("zones/iss.bin")

--------------------------
--      LOCALIZATION    --
--------------------------

-- Sparse map
world_vision_map_filename = resolve_resource("maps/iss.map")

-- AR Tag marker file
world_vision_ar_tag_filename = "dock_markers_world.config"
-- Distance of handrail from wall plane
world_handrail_wall_min_gap = 0.06
-- Huber loss function cutoff point to switch from quadratic to linear
world_huber_k = 1.345
-- From gtsam: Angular and velocity random walk expressed in degrees respectively m/s per sqrt(hr)
-- (0.5 * M_PI / 180) / 60;  // 0.5 degree ARW
world_gyro_sigma = 0.00001;    
-- 0.1 / 60; // 10 cm VRW
world_accel_sigma = 0.00015
world_accel_bias_sigma = 0.0077
world_gyro_bias_sigma = 0.0001
world_integration_variance = 0.0001
world_bias_acc_omega_int = 0.000015

--------------------------
--       PHYSICS        --
--------------------------

world_gravity_vector = vec3(0.0, 0.0, 0.0);

--------------------------
--       INERTIA        --
--------------------------

-- Inertial Parameters
-- Default assumes freeflyer, no payloads, 4 batteries, measured EEl 2/26/2019
world_inertia_name = "default";
world_inertia_com = vec3(0.003713818, -0.000326347, -0.002532192);              -- Center of mass
world_inertia_mass = 9.583788668;                           -- Platform + 4 batteries
world_inertia_matrix = matrix{{0.153427995, 0, 0},
                              {0, 0.14271405, 0},
                              {0, 0, 0.162302759}};         -- Inertia matrix

--------------------------
--     FLIGHT MODES     --
--------------------------

-- Initial and default flight mode
world_initial_flight_mode = "off";
world_default_flight_mode = "nominal";

-- All possible flight modes
world_flight_modes = {
  ---------
  -- OFF --
  ---------
  {
    -- This is the key we use to access the mode through FlightModeUtils::Load("")
    name = "off";

    -- Control enabled
    control_enabled = false;

    -- Attitude Parameters
    att_kp = vec3(4.0, 4.0, 4.0); -- .4
    att_ki = vec3(0.002, 0.002, 0.002);
    omega_kd = vec3(3.2, 3.2, 3.2); -- 1.1

    -- Position Loop
    pos_kp = vec3(.6, .6, .6); --.1
    pos_ki = vec3(0.0001, 0.0001, 0.0001);
    vel_kd = vec3(1.2, 1.2, 1.2);

    -- Impeller speed (0 => OFF, 1 = QUIET, 2 = NOMINAL, 3 = AGGRESSIVE)
    speed = 0;

    -- Tolerances
    tolerance_pos_endpoint = 0.1;                  -- Endpoint position (10 cm)
    tolerance_pos   = 0.1;                         -- Position (10 cm)
    tolerance_vel   = 0;                           -- Velocity (disabled)
    tolerance_att   = 0.1745;                      -- Attitude (10 degrees)
    tolerance_omega = 0;                           -- Omega (disabled)
    tolerance_time  = 1.0;                         -- Time (for sync check)

    -- The values below instruct the planner to generate segments that abide
    -- by kinematic constraints on linear and angular positions and velocities.
    hard_limit_vel   = 1.0000;  -- An impossible target to avoid rejection
    hard_limit_accel = 1.0000;  -- An impossible target to avoid rejection
    hard_limit_omega = 3.1415;  -- An impossible target to avoid rejection
    hard_limit_alpha = 0.1750;  -- An impossible target to avoid rejection
  },
  -------------
  -- NOMINAL --
  -------------
  {
    -- This is the key we use to access the mode through FlightModeUtils::Load("")
    name = "nominal";

    -- Control enabled
    control_enabled = true;

    -- Attitude Parameters
    att_kp = vec3(4.0, 4.0, 4.0); -- .4
    att_ki = vec3(0.002, 0.002, 0.002);
    omega_kd = vec3(3.2, 3.2, 3.2); -- 1.1

    -- Position Loop
    pos_kp = vec3(.6, .6, .6); --.1
    pos_ki = vec3(0.0001, 0.0001, 0.0001);
    vel_kd = vec3(1.2, 1.2, 1.2);

    -- Impeller speed (0 => OFF, 1 = QUIET, 2 = NOMINAL, 3 = AGGRESSIVE)
    speed = 2;

    -- Tolerances
    tolerance_pos_endpoint = 0.1;                  -- Endpoint position (10 cm)
    tolerance_pos   = 0.25;                        -- Position (25 cm)
    tolerance_vel   = 0;                           -- Velocity (disabled)
    tolerance_att   = 0.3491;                      -- Attitude (20 degrees)
    tolerance_omega = 0;                           -- Omega (disabled)
    tolerance_time  = 1.0;                         -- Time (for sync check)

    -- The values below instruct the planner to generate segments that abide
    -- by kinematic constraints on linear and angular positions and velocities.
    hard_limit_vel   = 0.2000;  
    hard_limit_accel = 0.0175; 
    hard_limit_omega = 0.1745; 
    hard_limit_alpha = 0.1745;  
  },
  ---------------
  -- DIFFICULT --
  ---------------
  {
    -- This is the key we use to access the mode through FlightModeUtils::Load("")
    name = "difficult";

    -- Control enabled
    control_enabled = true;

    -- Attitude Parameters
    att_kp = vec3(4.0, 4.0, 4.0); -- .4
    att_ki = vec3(0.002, 0.002, 0.002);
    omega_kd = vec3(3.2, 3.2, 3.2); -- 1.1

    -- Position Loop
    pos_kp = vec3(.6, .6, .6); --.1
    pos_ki = vec3(0.0001, 0.0001, 0.0001);
    vel_kd = vec3(1.2, 1.2, 1.2);

    -- Impeller speed (0 => OFF, 1 = QUIET, 2 = NOMINAL, 3 = AGGRESSIVE)
    speed = 3;

    -- Tolerances
    tolerance_pos_endpoint = 0.1;                  -- Endpoint position (10 cm)
    tolerance_pos   = 0.2;                         -- Position (20 cm)
    tolerance_vel   = 0;                           -- Velocity (disabled)
    tolerance_att   = 0.3490;                      -- Attitude (20 degrees)
    tolerance_omega = 0;                           -- Omega (disabled)
    tolerance_time  = 1.0;                         -- Time (for sync check)

    -- The values below instruct the planner to generate segments that abide
    -- by kinematic constraints on linear and angular positions and velocities.
    hard_limit_vel   = 0.4000;  
    hard_limit_accel = 0.0200;  
    hard_limit_omega = 0.5236;  
    hard_limit_alpha = 0.2500; 
  },
  -----------
  -- QUIET --
  -----------
  {
    -- This is the key we use to access the mode through FlightModeUtils::Load("")
    name = "quiet";

    -- Control enabled
    control_enabled = true;

    -- Attitude Parameters
    att_kp = vec3(4.0, 4.0, 4.0); -- .4
    att_ki = vec3(0.002, 0.002, 0.002);
    omega_kd = vec3(3.2, 3.2, 3.2); -- 1.1
    
    -- Position Loop
    pos_kp = vec3(.6, .6, .6); --.1
    pos_ki = vec3(0.0001, 0.0001, 0.0001);
    vel_kd = vec3(1.2, 1.2, 1.2);

    -- Impeller speed (0 => OFF, 1 = QUIET, 2 = NOMINAL, 3 = AGGRESSIVE)
    speed = 1;

    -- Tolerances
    tolerance_pos_endpoint = 0.1;                  -- Endpoint position (10 cm)
    tolerance_pos   = 0.1;                         -- Position (10 cm)
    tolerance_vel   = 0;                           -- Velocity (disabled)
    tolerance_att   = 0.1745;                      -- Attitude (10 degrees)
    tolerance_omega = 0;                           -- Omega (disabled)
    tolerance_time  = 1.0;                         -- Time (for sync check)

    -- The values below instruct the planner to generate segments that abide
    -- by kinematic constraints on linear and angular positions and velocities.
    hard_limit_vel   = 0.0200;  
    hard_limit_accel = 0.0020;  
    hard_limit_omega = 0.0174;  
    hard_limit_alpha = 0.0174;  
  },
  ---------------
  -- PRECISION --
  ---------------
  {
    -- This is the key we use to access the mode through FlightModeUtils::Load("")
    name = "precision";

    -- Control enabled
    control_enabled = true;

    -- Attitude Parameters
    att_kp = vec3(4.0, 4.0, 4.0); -- .4
    att_ki = vec3(0.002, 0.002, 0.002);
    omega_kd = vec3(3.2, 3.2, 3.2); -- 1.1

    -- Position Loop
    pos_kp = vec3(.6, .6, .6); --.1
    pos_ki = vec3(0.0001, 0.0001, 0.0001);
    vel_kd = vec3(1.2, 1.2, 1.2);

    -- Impeller speed (0 => OFF, 1 = QUIET, 2 = NOMINAL, 3 = AGGRESSIVE)
    speed = 3;

    -- Tolerances
    tolerance_pos_endpoint = 0.1;                  -- Endpoint position (10 cm)
    tolerance_pos   = 0.1;                         -- Position (10 cm)
    tolerance_vel   = 0;                           -- Velocity (disabled)
    tolerance_att   = 0.1745;                      -- Attitude (10 degrees)
    tolerance_omega = 0;                           -- Omega (disabled)
    tolerance_time  = 1.0;                         -- Time (for sync check)

    -- The values below instruct the planner to generate segments that abide
    -- by kinematic constraints on linear and angular positions and velocities.
    hard_limit_vel   = 0.0200;  
    hard_limit_accel = 0.0100;  
    hard_limit_omega = 0.1745;  
    hard_limit_alpha = 0.1745;  
  }
}

--------------------------
--       VISUALEYEZ     --
--------------------------

-- Visualeyez not available
world_visualeyez_grounding = {}
world_visualeyez_targets = {}
world_visualeyez_calibration = ""


--------------------------
--     VIVE     --
--------------------------

world_vive_force2d = false
world_vive_lighthouses = {}

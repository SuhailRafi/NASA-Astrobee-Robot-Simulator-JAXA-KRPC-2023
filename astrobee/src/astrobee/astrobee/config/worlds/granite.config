-- Copyright (c) 2017, United States Government, as represented by the
-- Administrator of the National Aeronautics and Space Administration.
--
-- All rights reserved.
--
-- The Astrobee platform is licensed under the Apache License, Version 2.0
-- (the "License"); you may not use this file except in compliance with the
-- License. You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-- WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-- License for the specific language governing permissions and limitations
-- under the License.

local matrix = require 'matrix'
require "rotations"

--------------------------
--      DOCKING         --
--------------------------

-- Location of the dock and berth tilt values (in degrees)
world_dock_orientation = rot_matrix_z(math.rad(0)) -- NOTE: Precision problem
world_dock_berth1_tilt = math.rad(0)    -- Tilt in body-frame Y
world_dock_berth2_tilt = math.rad(0)    -- Tilt in body-frame Y
world_dock_transform = transform(vec3(-0.825, 0.288, -0.675), quat4(0, 0, 0, 1))

--------------------------
--      MOBILITY       --
--------------------------

-- Path to the file containing zones
world_zone_file = resolve_resource("zones/granite.bin")

--------------------------
--      LOCALIZATION    --
--------------------------

-- Sparse map
world_vision_map_filename = resolve_resource("maps/granite.map")

-- AR Tag marker file
world_vision_ar_tag_filename = "dock_markers_world.config"
-- Distance of handrail from wall plane
world_handrail_wall_min_gap = 0.11
-- Huber loss function cutoff point to switch from quadratic to linear
world_huber_k = 0.5 
world_gyro_sigma = 0.005    
world_accel_sigma = 0.03 
world_accel_bias_sigma = 0.01
world_gyro_bias_sigma = 0.001
world_integration_variance = 0.05
world_bias_acc_omega_int = 0.0001

--------------------------
--       PHYSICS        --
--------------------------

world_gravity_vector = vec3(0.0, 0.0, 9.80665);

--------------------------
--       INERTIA        --
--------------------------

-- Inertial Parameters
world_inertia_name = "default";
world_inertia_com = vec3(0.0, 0.0, 0.0);              -- Center of mass, X and Y assumed to be zero for granite testing
world_inertia_mass = 18.9715;                            -- Platform + Carriage + 2 tanks + 2  batteries, measured EEL 2/26/19
world_inertia_matrix = matrix{{0.2517, 0,       0},   -- Izz derived from measured data, 2/26/19, assuming Ixx=Iyy=Izz for granite testing
                              {0,      0.2517,  0},
                              {0,      0,       0.2517}};

--------------------------
--     FLIGHT MODES     --
--------------------------

-- Initial and default flight modes
world_initial_flight_mode = "off";
world_default_flight_mode = "nominal";

-- All possible flight modes
world_flight_modes = {
  ---------
  -- OFF --
  ---------
  {
    -- This is the key we use to access the mode through FlightModeUtils::Load("")
    name = "off";

    -- Control enabled
    control_enabled = false;

    -- Attitude Parameters
    att_kp = vec3(0.0, 0.0, 4.0);
    att_ki = vec3(0.0, 0.0, 0.002);
    omega_kd = vec3(0.001, 0.001, 3.2);

    -- Position Loop
    pos_kp = vec3(0.6, 0.6, 0.0); --.1
    pos_ki = vec3(0.0001, 0.0001, 0.0);
    vel_kd = vec3(1.2, 1.2, .001);

    -- Impeller speed (0 => OFF, 1 = QUIET, 2 = NOMINAL, 3 = AGGRESSIVE)
    speed = 0;

    -- Tolerances
    tolerance_pos_endpoint = 0.1;                  -- Endpoint position (10 cm)
    tolerance_pos   = 0.1;                         -- Position (10 cm)
    tolerance_vel   = 0;                           -- Velocity (disabled)
    tolerance_att   = 0.1745;                      -- Attitude (10 degrees)
    tolerance_omega = 0;                           -- Omega (disabled)
    tolerance_time  = 1.0;                         -- Time (for sync check)

    -- The values below instruct the planner to generate segments that abide
    -- by kinematic constraints on linear and angular positions and velocities.
    hard_limit_vel   = 1.0000;  -- An impossible target to avoid rejection
    hard_limit_accel = 1.0000;  -- An impossible target to avoid rejection
    hard_limit_omega = 3.1415;  -- An impossible target to avoid rejection
    hard_limit_alpha = 0.1750;  -- An impossible target to avoid rejection
  },
  -------------
  -- NOMINAL --
  -------------
  {
    -- This is the key we use to access the mode through FlightModeUtils::Load("")
    name = "nominal";

    -- Control enabled
    control_enabled = true;

    -- Attitude Parameters
    att_kp = vec3(0.0, 0.0, 4.0);
    att_ki = vec3(0.0, 0.0, 0.002);
    omega_kd = vec3(0.001, 0.001, 3.2);

    -- Position Loop
    pos_kp = vec3(0.6, 0.6, 0.0); --.1
    pos_ki = vec3(0.0001, 0.0001, 0.0);
    vel_kd = vec3(1.2, 1.2, .001);


    -- Impeller speed (0 => OFF, 1 = QUIET, 2 = NOMINAL, 3 = AGGRESSIVE)
    speed = 2;

    -- Tolerances
    tolerance_pos_endpoint = 0.1;                  -- Endpoint position (10 cm)
    tolerance_pos   = 0.2;                         -- Position (20 cm)
    tolerance_vel   = 0;                           -- Velocity (disabled)
    tolerance_att   = 0.3491;                      -- Attitude (20 degrees)
    tolerance_omega = 0;                           -- Omega (disabled)
    tolerance_time  = 1.0;                         -- Time (for sync check)

    -- The values below instruct the planner to generate segments that abide
    -- by kinematic constraints on linear and angular positions and velocities.
    hard_limit_vel   = 0.2000;
    hard_limit_accel = 0.0175;
    hard_limit_omega = 0.1745;
    hard_limit_alpha = 0.1745;
  },
  ---------------
  -- DIFFICULT --
  ---------------
  {
    -- This is the key we use to access the mode through FlightModeUtils::Load("")
    name = "difficult";

    -- Control enabled
    control_enabled = true;

    -- Attitude Parameters
    att_kp = vec3(0.0, 0.0, 4.0);
    att_ki = vec3(0.0, 0.0, 0.002);
    omega_kd = vec3(0.001, 0.001, 3.2);

    -- Position Loop
    pos_kp = vec3(0.6, 0.6, 0.0); --.1
    pos_ki = vec3(0.0001, 0.0001, 0.0);
    vel_kd = vec3(1.2, 1.2, .001);


    -- Impeller speed (0 => OFF, 1 = QUIET, 2 = NOMINAL, 3 = AGGRESSIVE)
    speed = 3;

    -- Tolerances
    tolerance_pos_endpoint = 0.1;                  -- Endpoint position (10 cm)
    tolerance_pos   = 0.2;                         -- Position (20 cm)
    tolerance_vel   = 0;                           -- Velocity (disabled)
    tolerance_att   = 0.3490;                      -- Attitude (20 degrees)
    tolerance_omega = 0;                           -- Omega (disabled)
    tolerance_time  = 1.0;                         -- Time (for sync check)

    -- The values below instruct the planner to generate segments that abide
    -- by kinematic constraints on linear and angular positions and velocities.
    hard_limit_vel   = 0.4000;
    hard_limit_accel = 0.0200;
    hard_limit_omega = 0.5236;
    hard_limit_alpha = 0.2500;
  },
  -----------
  -- QUIET --
  -----------
  {
    -- This is the key we use to access the mode through FlightModeUtils::Load("")
    name = "quiet";

    -- Control enabled
    control_enabled = true;

    -- Attitude Parameters
    att_kp = vec3(0.0, 0.0, 4.0);
    att_ki = vec3(0.0, 0.0, 0.002);
    omega_kd = vec3(0.001, 0.001, 3.2);

    -- Position Loop
    pos_kp = vec3(0.6, 0.6, 0.0); --.1
    pos_ki = vec3(0.0001, 0.0001, 0.0);
    vel_kd = vec3(1.2, 1.2, .001);


    -- Impeller speed (0 => OFF, 1 = QUIET, 2 = NOMINAL, 3 = AGGRESSIVE)
    speed = 1;

    -- Tolerances
    tolerance_pos_endpoint = 0.1;                  -- Endpoint position (10 cm)
    tolerance_pos   = 0.1;                         -- Position (10 cm)
    tolerance_vel   = 0;                           -- Velocity (disabled)
    tolerance_att   = 0.1745;                      -- Attitude (10 degrees)
    tolerance_omega = 0;                           -- Omega (disabled)
    tolerance_time  = 1.0;                         -- Time (for sync check)

    -- The values below instruct the planner to generate segments that abide
    -- by kinematic constraints on linear and angular positions and velocities.
    hard_limit_vel   = 0.0200;
    hard_limit_accel = 0.0020;
    hard_limit_omega = 0.0174; 
    hard_limit_alpha = 0.0174; 
  },
  ---------------
  -- PRECISION --
  ---------------
  {
    -- This is the key we use to access the mode through FlightModeUtils::Load("")
    name = "precision";

    -- Control enabled
    control_enabled = true;

    -- Attitude Parameters
    att_kp = vec3(0.0, 0.0, 4.0);
    att_ki = vec3(0.0, 0.0, 0.002);
    omega_kd = vec3(0.001, 0.001, 3.2);

    -- Position Loop
    pos_kp = vec3(0.6, 0.6, 0.0); --.1
    pos_ki = vec3(0.0001, 0.0001, 0.0);
    vel_kd = vec3(1.2, 1.2, .001);

    -- Impeller speed (0 => OFF, 1 = QUIET, 2 = NOMINAL, 3 = AGGRESSIVE)
    speed = 3;

    -- Tolerances
    tolerance_pos_endpoint = 0.1;                  -- Endpoint position (10 cm)
    tolerance_pos   = 0.1;                         -- Position (10 cm)
    tolerance_vel   = 0;                           -- Velocity (disabled)
    tolerance_att   = 0.1745;                      -- Attitude (10 degrees)
    tolerance_omega = 0;                           -- Omega (disabled)
    tolerance_time  = 1.0;                         -- Time (for sync check)

    -- The values below instruct the planner to generate segments that abide
    -- by kinematic constraints on linear and angular positions and velocities.
    hard_limit_vel   = 0.0200; 
    hard_limit_accel = 0.0100;  
    hard_limit_omega = 0.1745;  
    hard_limit_alpha = 0.1745;  
  }
}

--------------------------
--      VISUALEYEZ      --
--------------------------

-- Visualeyez not required
world_visualeyez_grounding = {}
world_visualeyez_targets = {}
world_visualeyez_calibration = ""


--------------------------
--         VIVE         --
--------------------------

-- lighthouse to vive frame transform
world_vive_lighthouses = {
  {
    -- back
    serial = "2935772913", pose =
    transform(
      vec3(-1.30606, -0.356219, 1.72577),
      quat4(-0.578723, 0.498067, -0.264276, 0.589209)
    )
  },{
    -- front
    serial = "668207140", pose = transform(
      vec3(0, 0, 0), quat4(0, 0, 0, 1))
  }
}

-- vive to world frame transform
world_vive_registration = transform(
  vec3(0.67524, 1.1187, -1.68172),
  quat4(0.293068, -0.351571, 0.434293, 0.775821)
)

-- Copyright (c) 2017, United States Government, as represented by the
-- Administrator of the National Aeronautics and Space Administration.
--
-- All rights reserved.
--
-- The Astrobee platform is licensed under the Apache License, Version 2.0
-- (the "License"); you may not use this file except in compliance with the
-- License. You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-- WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-- License for the specific language governing permissions and limitations
-- under the License.

-- definitions common to all config files

pi  = math.pi;
off = false;
on  = true;

-- helpers

abs = math.abs;
sin = math.sin;
cos = math.cos;

function sq(x)
   return x*x
end

function circle_area(rad)
   return pi * rad * rad
end

function deg2rad(a)
   return a * pi / 180.0;
end

function iff(sel,a,b)
   if(sel) then
      return a;
   else
      return b;
   end
end

function get_imports()
  files = {}
  for k, v in pairs(package.loaded) do
    f = package.searchpath(k, package.path)
    if f ~= nil then
      table.insert(files, f)
    end
  end
  return files
end

-- classes

function class(base, init)
   local c = {}    -- a new class instance
   if not init and type(base) == 'function' then
      init = base
      base = nil
   elseif type(base) == 'table' then
    -- our new class is a shallow copy of the base class!
      for i,v in pairs(base) do
         c[i] = v
      end
      c._base = base
   end
   -- the class will be the metatable for all its objects,
   -- and they will look up their methods in it.
   c.__index = c

   -- expose a constructor which can be called by <classname>(<args>)
   local mt = {}
   mt.__call = function(class_tbl, ...)
   local obj = {}
   setmetatable(obj,c)
   if class_tbl.init then
      class_tbl.init(obj,...)
   else 
      -- make sure that any stuff from the base class is initialized!
      if base and base.init then
      base.init(obj, ...)
      end
   end
   return obj
   end
   c.init = init
   c.is_a = function(self, klass)
      local m = getmetatable(self)
      while m do 
         if m == klass then return true end
         m = m._base
      end
      return false
   end
   setmetatable(c, mt)
   return c
end

Vector = class()
function Vector:init(array)
  for i=1,#array do
    self[i] = array[i]
  end
end

function Vector.__add(lhs, rhs)
  local result = Vector({})
  if (#lhs ~= #rhs) then
    error("Vectors being added have different lengths.")
  end
  for i=1,#lhs do
    result[i] = lhs[i] + rhs[i]
  end
  return result
end

function Vector.__sub(lhs, rhs)
  local result = Vector({})
  if (#lhs ~= #rhs) then
    error("Vectors being subtracted have different lengths.")
  end
  for i=1,#lhs do
    result[i] = lhs[i] - rhs[i]
  end
  return result
end

-- scalar multiply or dot product
function Vector.__mul(lhs, rhs)
  local num = rhs
  local vec = lhs
  if type(lhs) == "number" then
    num = lhs
    vec = rhs
  end
  if type(num) == "number" then
    local result = Vector({})
    for i=1,#vec do
      result[i] = num * vec[i]
    end
    return result
  end
  -- otherwise do dot product
  if (#lhs ~= #rhs) then
    error("Vectors being multiplied have different lengths.")
  end
  local result = Vector({})
  for i=1,#lhs do
    result[i] = lhs[i] * rhs[i]
  end
  return result
end

function Vector.__div(lhs, rhs)
  if type(lhs) == "number" then
    local result = Vector({})
    for i=1,#rhs do
      result[i] = lhs / rhs[i]
    end
    return result
  end
  if type(rhs) == "number" then
    local result = Vector({})
    for i=1,#lhs do
      result[i] = lhs[i] / rhs
    end
    return result
  end
  -- otherwise do per-element division
  if (#lhs ~= #rhs) then
    error("Vectors being divided have different lengths.")
  end
  local result = Vector({})
  for i=1,#lhs do
    result[i] = lhs[i] / rhs[i]
  end
  return result
end

function Vector:__tostring()
  local s = "<"
  for i=1,#self do
    s = s .. self[i] .. ( i == #self and "" or ", ")
  end
  return s .. ">"
end

-- constructors

function vec2(_x,_y)
  return Vector({_x,_y})
end

function vec3(_x,_y,_z)
  return Vector({_x,_y,_z})
end

function quat4(_x,_y,_z,_w)
  return {x=_x,y=_y,z=_z,w=_w}
end

function transform(_v, _q)
  return {trans=_v, rot=_q}
end

function rgba(_r, _g, _b, _a)
  return {r=_r, g=_g, b=_b, a=_a};
end


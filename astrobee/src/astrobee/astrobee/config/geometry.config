-- Copyright (c) 2017, United States Government, as represented by the
-- Administrator of the National Aeronautics and Space Administration.
--
-- All rights reserved.
--
-- The Astrobee platform is licensed under the Apache License, Version 2.0
-- (the "License"); you may not use this file except in compliance with the
-- License. You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-- WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-- License for the specific language governing permissions and limitations
-- under the License.

require "context"
require "rotations"

-- distance from camera to AR tag
marker_height = 0.89

-- world coordinates to overhead camera
overhead_cam_transform = transform(vec3(-0.10, 0.05, -1.782),    quat4( 0,        0,  -0.7632,   0.6461));

-- transform from body frame to AR tag
ar_tag_transform = transform(vec3(0.0, 0.0, 0.0),   quat4(0.7071, 0.7071, 0.0, 0.0));

-- loaded from robot.config
perch_cam_transform = robot_geometry.perch_cam_transform;
haz_cam_transform = robot_geometry.haz_cam_transform;
nav_cam_transform = robot_geometry.nav_cam_transform;
dock_cam_transform = robot_geometry.dock_cam_transform;
sci_cam_transform = robot_geometry.sci_cam_transform;
imu_transform = robot_geometry.imu_transform;

nav_cam_to_haz_cam_transform = robot_geometry.nav_cam_to_haz_cam_transform;
nav_cam_to_sci_cam_transform = robot_geometry.nav_cam_to_sci_cam_transform;
haz_cam_depth_to_image_transform = robot_geometry.haz_cam_depth_to_image_transform;

-- These will maybe be robot-specific post-calibration
flashlight_front_transform = transform(vec3(0.1345, 0, .0369), quat4(0.0, 0.0, 0.0, 1.0));
flashlight_aft_transform = transform(vec3(-0.1345, -0.054, 0.0303), quat4(0.0, 0.0, 1.0, 0.0));
laser_transform = transform(vec3(0.1302, 0.0572, -0.1111), quat4(0.0, 0.0, 0.0, 1.0));

-- Payload locations (needed to for determining gripper location of perching arm)
payload_top_aft_transform  = transform(vec3(-0.01, 0.0, -0.065), quat4(0.0, 0.0, 1.0, 0.0));
payload_top_front_transform = transform(vec3(0.01, 0.0, -0.065), quat4(0.0, 1.0, 0.0, 0.0));
payload_bottom_aft_transform  = transform(vec3(-0.01, 0.0, 0.065), quat4(0.0, -1.0, 0.0, 0.0));
payload_bottom_front_transform = transform(vec3(0.01, 0.0, 0.065), quat4(0.0, 1.0, 0.0, 0.0));

-- The position and orientation of the dock is define world/{granite,iss}.config:
-- world_dock_transform

-- Dock specifications
-- Definitions of coordinate system is in:
-- IRG-FF002-01-Astrobee-Coordinate-Frame-Document
function berth_transform(sign, tilt)
  -- Constants
  in2m = 0.0254
  berth_separation = 20.0 * in2m
  berth_length = 3.908 * in2m
  -- The berths location are fixed relative to the dock
  position = vec3( berth_length * math.cos(tilt),
                   sign * berth_separation/2.0,
                   berth_length * math.sin(tilt) )
  R = rot_matrix_y(-tilt)
  -- Invert the right hand berth (#2)
  if (sign < 0) then
    R = rot_matrix_x(3.14159265359) * R
  end
  -- Return the transform from the dock to the berth
  return transform(position, rmat2quat(R))
end

-- Various constants for docking
freeflyer_length = 0.200
freeflyer_reach  = 0.155
approach_dist    = 0.500
ensure_dist      = 0.500

-- Docking and perching
dock_to_berth_1_transform = berth_transform( 1.0, world_dock_berth1_tilt)
dock_to_berth_2_transform = berth_transform(-1.0, world_dock_berth2_tilt)
berth_to_complete_transform = transform(vec3(freeflyer_length/2.0, 0.0, 0.0),
                              quat4(0.0, 0.0, 0.0, 1.0) )
berth_to_approach_transform = transform(vec3(freeflyer_length/2.0 + approach_dist, 0.0, 0.0),
                              quat4(0.0, 0.0, 0.0, 1.0) )
handrail_to_complete_transform = transform(vec3(freeflyer_length/2.0 + freeflyer_reach, 0.0, 0.0),
                              quat4(0.0, 0.0, 0.0, 1.0) )
handrail_to_approach_transform = transform(vec3(freeflyer_length/2.0 + approach_dist, 0.0, 0.0),
                              quat4(0.0, 0.0, 0.0, 1.0) )

-- Extra rotations needed elsewhere
Zdown_rot_matrix = rot_matrix_x(math.pi)
Zup_to_Zdown = transform(vec3(0.0, 0.0, 0.0),
  quat4_from_rot_matrix(Zdown_rot_matrix) )

-- Copyright (c) 2017, United States Government, as represented by the
-- Administrator of the National Aeronautics and Space Administration.
--
-- All rights reserved.
--
-- The Astrobee platform is licensed under the Apache License, Version 2.0
-- (the "License"); you may not use this file except in compliance with the
-- License. You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-- WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-- License for the specific language governing permissions and limitations
-- under the License.

require "context"

-- bayer_enable: Set to true to enable publishing raw Bayer images (can
--   be converted to RGB). May incur significant I/O overhead.

-- bayer_throttle_ratio: Set to n to publish 1 raw Bayer image for
--   every n images grabbed. With n = 1, every image is
--   published. Larger n reduces I/O overhead.

nav_cam = {
  width                = 1280,
  height               = 960,
  undistorted_width    = 3000,
  undistorted_height   = 1800,
  distortion_coeff     = robot_camera_calibrations.nav_cam.distortion_coeff,
  intrinsic_matrix     = robot_camera_calibrations.nav_cam.intrinsic_matrix,
  device               = "/dev/nav_cam",
  gain                 = robot_camera_calibrations.nav_cam.gain,
  exposure             = robot_camera_calibrations.nav_cam.exposure,
  auto_exposure        = false,
  calibration_gain     = 105,
  calibration_exposure = 30,
  bayer_enable         = false,
  bayer_throttle_ratio = 3
};

dock_cam = {
  width                = 1280,
  height               = 960,
  undistorted_width    = 3000,
  undistorted_height   = 1800,
  distortion_coeff     = robot_camera_calibrations.dock_cam.distortion_coeff,
  intrinsic_matrix     = robot_camera_calibrations.dock_cam.intrinsic_matrix,
  device               = "/dev/dock_cam",
  gain                 = robot_camera_calibrations.dock_cam.gain,
  exposure             = robot_camera_calibrations.dock_cam.exposure,
  auto_exposure        = false,
  calibration_gain     = 105,
  calibration_exposure = 30,
  bayer_enable         = false,
  bayer_throttle_ratio = 3
};

haz_cam = {
  width                = 224,
  height               = 171,
  undistorted_width    = 250,
  undistorted_height   = 200,
  distortion_coeff     = robot_camera_calibrations.haz_cam.distortion_coeff,
  intrinsic_matrix     = robot_camera_calibrations.haz_cam.intrinsic_matrix,
  device               = "/dev/haz_cam",
  gain                 = robot_camera_calibrations.haz_cam.gain,
  exposure             = robot_camera_calibrations.haz_cam.exposure,
  calibration_gain     = 105,
  calibration_exposure = 30
};

perch_cam = {
  width                = 224,
  height               = 171,
  undistorted_width    = 250,
  undistorted_height   = 200,
  distortion_coeff     = robot_camera_calibrations.perch_cam.distortion_coeff,
  intrinsic_matrix     = robot_camera_calibrations.perch_cam.intrinsic_matrix,
  device               = "/dev/perch_cam",
  gain                 = robot_camera_calibrations.perch_cam.gain,
  exposure             = robot_camera_calibrations.perch_cam.exposure,
  calibration_gain     = 105,
  calibration_exposure = 30
};

sci_cam = {
  width                = 1336,
  height               = 1002,
  undistorted_width    = 2000,
  undistorted_height   = 2000,
  distortion_coeff     = robot_camera_calibrations.sci_cam.distortion_coeff,
  intrinsic_matrix     = robot_camera_calibrations.sci_cam.intrinsic_matrix,
  device               = "/dev/sci_cam",
  gain                 = robot_camera_calibrations.sci_cam.gain,
  exposure             = robot_camera_calibrations.sci_cam.exposure,
  calibration_gain     = 105,
  calibration_exposure = 30
};

nav_cam_to_haz_cam_timestamp_offset = robot_camera_calibrations.nav_cam_to_haz_cam_timestamp_offset;
nav_cam_to_sci_cam_timestamp_offset = robot_camera_calibrations.nav_cam_to_sci_cam_timestamp_offset;

-- Auto-exposure parameters
desired_msv = 2.5;            -- should be 2.5 as histogram size is 5
k_p         = 25.0;           -- proportional gain
k_i         = 8.0;            -- integral gain
max_i       = 100.0;          -- maximum i
tolerance   = 0.2;            -- msv tolerance to minimize exposure reconfigure

-----------------------------------------------------
--  PicoFlexx cameras support the following modes
-----------------------------------------------------
-- MODE_9_5FPS_2000
-- MODE_9_10FPS_1000
-- MODE_9_15FPS_700
-- MODE_9_25FPS_450
-- MODE_5_35FPS_600
-- MODE_5_45FPS_500
-----------------------------------------------------

picoflexx = {
  api_key = "",
  devices = {
    {
      name = "perch_cam",               -- frame
      topic = "perch",                  -- frame
      device = robot_perch_cam_device,  -- camera uuid ("" : automatic)
      exposure = 0,                     -- exposure time (0: automatic)
      mode = "MODE_9_5FPS_2000",        -- use case
      required = true,                  -- is camera required
      amplitude_factor = 100.0
    },{
      name = "haz_cam",                 -- frame
      topic = "haz",                    -- frame
      device = robot_haz_cam_device,    -- camera uuid ("" : automatic)
      exposure = 0,                     -- exposure time (0: automatic)
      mode = "MODE_9_5FPS_2000",        -- use case
      required = true,                  -- is camera required
      amplitude_factor = 100.0
    },{
      name = "test_cam",                -- special name
      topic = "test",                   -- frame
      device = "0005-4805-0050-1520",   -- camera uuid ("" : automatic)
      exposure = 0,                     -- exposure time (0: automatic)
      mode = "MODE_5_45FPS_500",        -- use case
      required = false,                 -- is camera required
      amplitude_factor = 100.0
    }
  }
}

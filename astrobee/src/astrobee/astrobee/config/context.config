-- Copyright (c) 2017, United States Government, as represented by the
-- Administrator of the National Aeronautics and Space Administration.
--
-- All rights reserved.
--
-- The Astrobee platform is licensed under the Apache License, Version 2.0
-- (the "License"); you may not use this file except in compliance with the
-- License. You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-- WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-- License for the specific language governing permissions and limitations
-- under the License.

-- Check that we have ASTROBEE_CONFIG_DIR set
local config_dir = os.getenv("ASTROBEE_CONFIG_DIR")
if config_dir == nil then
  io.stderr:write("ASTROBEE_CONFIG_DIR not set, aborting.\n")
  os.exit()
end
-- Check that we have ASTROBEE_RESOURCE_DIR set
local resource_dir = os.getenv("ASTROBEE_RESOURCE_DIR")
if resource_dir == nil then
  io.stderr:write("ASTROBEE_RESOURCE_DIR not set, aborting.\n")
  os.exit()
end
-- Supply a resolve function to find resources
function resolve_resource(path)
   return resource_dir .. "/" .. path
end
-- Load the robot configuration for the current context
robot_name = nil
local robot_name_file = io.open("/etc/robotname", "r")
if robot_name_file ~= nil then
  robot_name = robot_name_file:read()
  robot_name_file:close()
else
  robot_name = os.getenv("ASTROBEE_ROBOT")
  if robot_name == nil then
    io.stderr:write("ASTROBEE_ROBOT not set, aborting.\n")
    os.exit()
  end
end

local robot_config_file = config_dir .. "/robots/" .. robot_name .. ".config"
-- use absolute path name if specified (but will cause problems with executive)
if string.sub(robot_name, -string.len(".config")) == ".config" then
  robot_config_file = robot_name
end
local robot_module = loadfile(robot_config_file)
if robot_module == nil then
  io.stderr:write("Failed to open robot config file " .. robot_config_file .. ".\n")
  os.exit()
end
-- Load the world configuration for the current context
world_name = os.getenv("ASTROBEE_WORLD")
if world_name == nil then
  io.stderr:write("ASTROBEE_WORLD not set, aborting.\n")
  os.exit()
end
local world_config_file = config_dir .. "/worlds/" .. world_name .. ".config"
local world_module = loadfile(world_config_file)
if world_module == nil then
  io.stderr:write("Failed to open world config file " .. world_config_file .. ".\n")
  os.exit()
end
-- Populate context information
robot_module()
world_module()
return


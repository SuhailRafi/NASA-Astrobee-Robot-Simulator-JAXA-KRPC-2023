-- Copyright (c) 2017, United States Government, as represented by the
-- Administrator of the National Aeronautics and Space Administration.
--
-- All rights reserved.
--
-- The Astrobee platform is licensed under the Apache License, Version 2.0
-- (the "License"); you may not use this file except in compliance with the
-- License. You may obtain a copy of the License at
--
--     http://www.apache.org/licenses/LICENSE-2.0
--
-- Unless required by applicable law or agreed to in writing, software
-- distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
-- WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
-- License for the specific language governing permissions and limitations
-- under the License.

require "common_lua"
require "cameras"
require "geometry"
require "matrix"

local matrix = require 'matrix'

-- Load prototype specific geometry (this will )

-------------------- Test Parameters ---------------------
tun_ase_gravity_accel = world_gravity_vector;
tun_ase_gravity_removal = false;
-- tun_ase_gravity_accel = vec3(0.0, 0.0, 0.0);
-- tun_ase_gravity_removal = false;

-- Attitude Parameters
ctl_att_kp = vec3(2.0, 2.0, 2.0); -- .4
ctl_att_ki = vec3(0.001, 0.001, 0.001);
ctl_omega_kd = matrix{{1.6, 1.6, 1.6}}; -- 1.1

-- Position Loop
ctl_pos_kp = vec3(.6, .6, .6); --.1
ctl_pos_ki = vec3(0.0001, 0.0001, 0.0001);
ctl_vel_kd = vec3(1.2, 1.2, 1.2);

-- Docking Parameters
-- Position loop gains
ctl_pos_kp_dock = vec3(.6, .6, 0.0); --.1
ctl_pos_ki_dock = vec3(0.0001, 0.0001, 0.0);
ctl_vel_kd_dock = vec3(1.2, 1.2, 1.2);

-- Attitude loop gains
ctl_att_kp_dock = vec3(0.0, 0.0, 1); -- 4
ctl_att_ki_dock = vec3(0.0, 0.0, 0.001);
ctl_omega_kd_dock = matrix{{1.1, 1.1, 1.4}}; -- 3

-- Accel Feedforward Gains
tun_accel_gain = vec3(1.0, 1.0, 1.0);
tun_alpha_gain = vec3(1.0, 1.0, 1.0);

-- Simulation Parameters
tun_bpm_enable = true; -- Set model to use bpm instead of vpp
tun_env_accel_dof_gain = vec3(1.0, 1.0, 1.0); -- Constrain Z axis movement in simulation (granite table)
tun_env_alpha_dof_gain = vec3(1.0, 1.0, 1.0); -- Constrain X and Y axis rotation in simulation (granite table)
tun_iss_omega_ISS_ECI_ISS = vec3(-8.2650e-07, 3.0746e-08, 7.2916e-05); -- Earth spin rate in granite table frame, See derivation in env_environment_model_prep.m

-- Debug Truth Data Parameters
-- Filter applied to quaternion derivative
tun_truth_q_omega_filt_cutoff_freq = 15*pi/180;
tun_truth_q_omega_filt_enable = 0.0; -- Disabled by default
tun_truth_velocity_filt_cutoff_freq = 15*pi/180;
tun_truth_velocity_filt_enable = 0.0; -- Disabled by default

-----------------------------------------------------------------

-- Initial Conditions

tun_ini_P_B_ISS_ISS = vec3(0.0, 0.0, -0.7); -- sim position i.c.

tun_ini_V_B_ISS_ISS = vec3(0.0, 0.0, 0.0); -- sim velocity i.c.
tun_ini_omega_B_ISS_B = vec3(0.0, 0.0, 0.0); -- sim rotational velocity i.c.
tun_ini_Q_ISS2B = {0.0, 0.0, 0.0, 1.0};  -- sim initial attitude quat i.c.

-- CTL parameters
tun_ctl_linear_force_limit = 100.0;
tun_ctl_att_sat_lower = -0.5;
tun_ctl_att_sat_upper = 0.5;

tun_ctl_pos_sat_lower = -0.1;
tun_ctl_pos_sat_upper = 0.1;

-------- Default Gain Values --------
-- Actual gains are flight mode specific and set in %%%%
tun_default_att_kp = vec3(2.0, 2.0, 2.0); --.4
tun_default_att_ki = vec3(0.001, 0.001, 0.001);
tun_default_omega_kd = vec3(1.6, 1.6, 1.6); -- 1.1
tun_default_pos_kp = vec3(.6, .6, 0.6); --.1
tun_default_pos_ki = vec3(0.0001, 0.0001, 0.0001);
tun_default_vel_kd = vec3(1.2, 1.2, 1.2);
tun_default_center_of_mass = vec3(0.0, 0.0, 0.00);
tun_default_inertia_matrix =  matrix{{0.1083, 0, 0}, {0, 0.1083, 0}, {0, 0, 0.1083}};
tun_default_mass = 7.0;
tun_default_speed_gain_cmd = 3;
tun_default_localization_mode_cmd = 0;
--tun_ffp_veh_inertia_matrix =
--tun_ffp_veh_inertia_matrix_inv = matrix.invert(tun_ffp_veh_inertia_matrix);


-------------------------- Command Shaper ----------------------------
tun_ctl_bypass_cmd_shaper = true;

-- PCH Gains
tun_cmd_pch_pos_k = 0*2*8;
tun_cmd_pch_att_k = 0*20*3;
-- nozzle_areas = matrix{{0.0027, 0.0027, 0.0015, 0.0015, 0.0015, 0.0015, 0.0027, 0.0027, 0.0015, 0.0015, 0.0015, 0.0015}};

tun_cmd_pch_max_area = {0.0027, 0.0027, 0.0015, 0.0015, 0.0015, 0.0015, 0.0027,
						0.0027, 0.0015, 0.0015, 0.0015, 0.0015};

-- Reset Parameters
tun_cmd_pos_error_reset_thresh = 0.25; -- Magnitude of position error (m) before the command shaper recomputes a new trajectory
tun_cmd_att_error_reset_thresh = 30 * math.pi / 180; -- Magnitude of attitude error (rad) before the command shaper recomputes a new trajectory


-- Stopped Mode Parameters
tun_ctl_stopped_pos_thresh = 0.1;
tun_ctl_stopped_quat_thresh = 10*pi/180;
tun_ctl_stopping_vel_thresh = .02^2; -- Linear velocity threshold squared below which the vehicle is considered to be stopped, (m/s)^2
tun_ctl_stopping_omega_thresh = .02^2; -- Angular velocity threshold squared below which the vehicle is considered to be stopped, (rad/s)^2



-- Command Shaper Gains
tun_cmd_pos_gain_mtrx =   vec3(4/2, 4/2, 4/2);
tun_cmd_vel_gain_mtrx =   vec3(67.5/4, 67.5/4, 67.5/4);
tun_cmd_acc_gain_mtrx =   vec3(10.0, 10.0, 10.0);
tun_cmd_quat_gain_mtrx =  vec3(1.0*10, 1.0*10, 1.0*10);
tun_cmd_omega_gain_mtrx = vec3(4.0*10, 4.0*10, 4.0*10);
tun_cmd_alpha_gain_mtrx = vec3(8.0*10, 8.0*10, 8.0*10); --2


tun_cmd_hard_vel_limit = 0.5;
tun_cmd_hard_accel_limit = 0.1;
tun_cmd_hard_omega_limit= 45 * math.pi / 180; -- [rad/s] Hard limit for vehicle angular velocity, commands will never exceed
tun_cmd_hard_alpha_limit= 50 * math.pi / 180; -- [rad/s/s] Hard limit for vehicle angular acceleration, commands will never exceed



-------------------------- EKF parameters ----------------------------

-- IMU parameters
--q_gyro       = 3.24E-5 ^ 2;
--q_gyro_bias  = 2e-6 ^ 2;
--q_accel      = (10*5.8e-4) ^ 2;
--q_accel_bias = 8e-5 ^ 2; -- 8e-5, 300e-5
--q_gyro       = 1000 * 1.3539e-11;
--q_gyro_bias  = 1000 * 3.4320e-14;
--q_accel      = 20 * 4.5511e-09;
--q_accel_bias = 10 * 1.3678e-11;

--q_gyro       = 0.0002 ^ 2
--q_gyro       = (0.14 * math.pi / 180) ^ 2
--q_gyro_bias  = (1e-6 * math.pi / 180) ^ 2
--q_accel      = 0.001 ^ 2
--q_accel_bias = 1e-5 ^ 2

q_gyro       = (0.274 * math.pi / 180) ^ 2
q_gyro_bias  = (1e-7 * math.pi / 180) ^ 2
q_accel      = 1e-7
q_accel_bias = 5e-9

tun_ase_Q_imu = {q_gyro, q_gyro, q_gyro, q_gyro_bias, q_gyro_bias, q_gyro_bias,
             q_accel, q_accel, q_accel, q_accel_bias, q_accel_bias, q_accel_bias};
tun_ase_max_gyro = (150 * math.pi / 180);
tun_ase_max_accel = 3 * 9.81;
tun_ase_q_saturated_gyro  = (2 * math.pi / 180) ^ 2;
tun_ase_q_saturated_accel = 1;

--------------------- Vision parameters  ----------------------
tun_ase_enable_of = true;
tun_ase_mahal_distance_max = 18; -- Max distance to accept a measurment
tun_max_mahal_reject_frames = 200000; -- Max number of consecutive measurements to reject via the mahalanobis check
tun_ase_ml_forward_projection_time = 0.5 * 1.0 / 15;
tun_ase_map_error = 0.02

-- Mapped Landmark Navigation
tun_ase_navcam_inv_focal_length = 1.0 / nav_cam.intrinsic_matrix[1];
tun_ase_navcam_distortion = nav_cam.distortion_coeff;
tun_ase_vis_r_mag = 4.5;
tun_ase_min_ml_meas = 10; --Minumum number of valid features to trigger a ML update

-- Docking
tun_ase_dockcam_inv_focal_length = 1.0 / dock_cam.intrinsic_matrix[1];
tun_ase_dockcam_distortion = nav_cam.distortion_coeff;
tun_ase_dock_r_mag = 2.0;
tun_ase_min_ar_meas = 4; -- Min number of features in AR mode to trigger an update

-- VizOdometry
tun_ase_vocam_inv_focal_length = tun_ase_navcam_inv_focal_length;
tun_ase_of_r_mag  = 1.22;
tun_ase_min_of_meas = 10; --Minumum number of valid track that triggers an OF update

-- Perching
tun_ase_min_hr_meas = 10; --Minumum number of depth sensor points that triggers an HR update
tun_ase_hr_r_mag = 0.01; -- Perching measurment noise
tun_ase_hr_distance_r = 0.06; -- meters

-- State changes
-- in units of variance of position
tun_ase_converged_thresh = 0.1 ^ 2
tun_ase_diverged_thresh = 0.15 ^ 2
tun_ase_acquired_ticks = 62.5 * 100; -- Num of est. calls before drops to acquired without ML update

-- Initial state
tun_ase_state_ic_P_B_ISS_ISS = tun_ini_P_B_ISS_ISS;
tun_ase_state_ic_quat_ISS2B = tun_ini_Q_ISS2B;
tun_ase_state_ic_omega_B_ISS_B = tun_ini_omega_B_ISS_B;
tun_ase_state_ic_V_B_ISS_ISS = tun_ini_V_B_ISS_ISS;

-- Calculate initial Estimator Position
q1 = tun_ini_Q_ISS2B[1];
q2 = tun_ini_Q_ISS2B[2];
q3 = tun_ini_Q_ISS2B[3];
q4 = tun_ini_Q_ISS2B[4];
temp_xi = matrix{{q4, -q3, q2}, {q3, q4, -q1}, {-q2, q1, q4},  {-q1, -q2, -q3}};
temp_xi = temp_xi;
temp_psi = matrix{{q4, q3, -q2}, {-q3, q4, q1}, {q2, -q1, q4},  {-q1, -q2, -q3}};
xi_trans = matrix.transpose(temp_xi);
temp_A = xi_trans * temp_psi;
imu_P_IMU_B_ISS = matrix.transpose(temp_A) * matrix{imu_transform.trans[1], imu_transform.trans[2], imu_transform.trans[3]};
imu_P_IMU_B_ISS = vec3(matrix.getelement(imu_P_IMU_B_ISS,1,1), matrix.getelement(imu_P_IMU_B_ISS,2,1), matrix.getelement(imu_P_IMU_B_ISS,3,1));
tun_ase_state_ic_P_EST_ISS_ISS =  tun_ini_P_B_ISS_ISS + imu_P_IMU_B_ISS;
tun_ic_cov_quat   = 1e-4;
ic_cov_g_bias = 2e-11;
ic_cov_vel    = 1e-4;
ic_cov_a_bias = 1e-9;
tun_ic_cov_pos    = 1e-3;
tun_aug_ic_cov = 1e-5;
tun_ase_state_ic_cov_diag = {tun_ic_cov_quat,   tun_ic_cov_quat,   tun_ic_cov_quat,
                             ic_cov_g_bias, ic_cov_g_bias, ic_cov_g_bias,
                             ic_cov_vel,    ic_cov_vel,    ic_cov_vel,
                             ic_cov_a_bias, ic_cov_a_bias, ic_cov_a_bias,
                             tun_ic_cov_pos,    tun_ic_cov_pos,    tun_ic_cov_pos};


-- Sensor Position and Orientation
tun_abp_p_navcam_imu_est          = nav_cam_transform.trans - imu_transform.trans;
tun_abp_p_navcam_body_body_sim    = nav_cam_transform.trans;
tun_abp_q_body2navcam             = {nav_cam_transform.rot.x, nav_cam_transform.rot.y, nav_cam_transform.rot.z, nav_cam_transform.rot.w};
tun_abp_p_dockcam_imu_est         = dock_cam_transform.trans - imu_transform.trans;
tun_abp_p_dockcam_body_body_sim   = dock_cam_transform.trans;
tun_abp_q_body2dockcam            = {dock_cam_transform.rot.x, dock_cam_transform.rot.y, dock_cam_transform.rot.z, dock_cam_transform.rot.w};
tun_abp_p_perchcam_imu_est        = perch_cam_transform.trans - imu_transform.trans;
tun_abp_p_perchcam_body_body_sim  = perch_cam_transform.trans;
tun_abp_q_body2perchcam           = {perch_cam_transform.rot.x, perch_cam_transform.rot.y, perch_cam_transform.rot.z, perch_cam_transform.rot.w};

tun_abp_p_imu_body_body           = imu_transform.trans;
tun_abp_quat_body2imu             = {imu_transform.rot.x, imu_transform.rot.y, imu_transform.rot.z, imu_transform.rot.w};

-- Accel High Pass Filter (For ground testing in the presence of gravity)
tun_grav_hp_enable_f = false;
hp_omega_c = 10;
hp_Ts = 1/62.5;
tun_grav_hp_num = {2, -2};
tun_grav_hp_den = {2+hp_Ts*hp_omega_c, hp_Ts*hp_omega_c - 2};

-------------------------- SIM parameters ----------------------------

tun_debug_ctl_use_truth = false; -- Controller will use ground truth instead of KFL estimate, only works in sim

-- Mass properties
tun_mass_error = 0; -- Computed as true_mass = knowledge_mass + tun_mass_error
tun_inertia_error_mat = matrix{{0, 0, 0}, {0, 0, 0}, {0, 0, 0}}; -- true_inertia = known_inertia + tun_inertia_error_mat
tun_sim_cg_error =  vec3(0.0, 0.0, 0.0); -- true_cg = tun_default_center_of_mass + tun_cg_error

-- CVS Model
tun_cvs_navcam_focal_length_X 		= nav_cam.intrinsic_matrix[1];
tun_cvs_navcam_focal_length_Y		= nav_cam.intrinsic_matrix[5];
tun_cvs_navcam_num_pixels_X 		= nav_cam.undistorted_width;
tun_cvs_navcam_num_pixels_Y 		= nav_cam.undistorted_height;
tun_cvs_dockcam_focal_length_X 		= dock_cam.intrinsic_matrix[1];
tun_cvs_dockcam_focal_length_Y		= dock_cam.intrinsic_matrix[5];
tun_cvs_dockcam_num_pixels_X 		= dock_cam.undistorted_width;
tun_cvs_dockcam_num_pixels_Y 		= dock_cam.undistorted_height;
tun_cvs_perchcam_focal_length_X 	= 113.638;
tun_cvs_perchcam_focal_length_Y		= 86.1833;
tun_cvs_perchcam_num_pixels_X 		= 224;
tun_cvs_perchcam_num_pixels_Y 		= 171;


-- Noise Enables
-- tun_epson_report_truth = true;
-- tun_cvs_noise_on = false;
-- tun_bpm_noise_on_flag = 0.0; -- Needs to be a single for some reason, 1.0 = noise on, 0.0 noise off
tun_env_drag_disturb_on = false; -- Air drag

tun_epson_report_truth = false;
tun_cvs_noise_on = true;
tun_bpm_noise_on_flag = 0.0;

-- Sim Thrust Scale Factor, scale factor to apply to simulated thrust
tun_bpm_PM1_thrust_error_sf  = 1.25;
tun_bpm_PM2_thrust_error_sf  = 1.25;

-- Non-GNC parameters
min_of_observations 			= 15;
bias_required_observations 		= 62 * 5;
imu_bias_file 					= resolve_resource("imu_bias.config");

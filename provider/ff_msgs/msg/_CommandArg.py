# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ff_msgs/CommandArg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class CommandArg(genpy.Message):
  _md5sum = "c64f399f685551792b2e185eb2878830"
  _type = "ff_msgs/CommandArg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Copyright (c) 2017, United States Government, as represented by the
# Administrator of the National Aeronautics and Space Administration.
# 
# All rights reserved.
# 
# The Astrobee platform is licensed under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with the
# License. You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# An argument to a command sent through RAPID
#
# Note that this is approximating a union in DDS. However, this is an
# inefficient union, and thus each instance will take up at least 89 bytes.
# However, even with the maximum of 16 arguments to a command, we only have
# about 1k extra data. I, tfmorse, am ok with that. Commands are rarely sent.

uint8 DATA_TYPE_BOOL     = 0
uint8 DATA_TYPE_DOUBLE   = 1
uint8 DATA_TYPE_FLOAT    = 2
uint8 DATA_TYPE_INT      = 3
uint8 DATA_TYPE_LONGLONG = 4
uint8 DATA_TYPE_STRING   = 5
uint8 DATA_TYPE_VEC3d    = 6
uint8 DATA_TYPE_MAT33f   = 7

uint8 data_type

bool b
float64 d
float32 f
int32 i
int64 ll
string s
float64[3] vec3d
float32[9] mat33f

"""
  # Pseudo-constants
  DATA_TYPE_BOOL = 0
  DATA_TYPE_DOUBLE = 1
  DATA_TYPE_FLOAT = 2
  DATA_TYPE_INT = 3
  DATA_TYPE_LONGLONG = 4
  DATA_TYPE_STRING = 5
  DATA_TYPE_VEC3d = 6
  DATA_TYPE_MAT33f = 7

  __slots__ = ['data_type','b','d','f','i','ll','s','vec3d','mat33f']
  _slot_types = ['uint8','bool','float64','float32','int32','int64','string','float64[3]','float32[9]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       data_type,b,d,f,i,ll,s,vec3d,mat33f

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CommandArg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.data_type is None:
        self.data_type = 0
      if self.b is None:
        self.b = False
      if self.d is None:
        self.d = 0.
      if self.f is None:
        self.f = 0.
      if self.i is None:
        self.i = 0
      if self.ll is None:
        self.ll = 0
      if self.s is None:
        self.s = ''
      if self.vec3d is None:
        self.vec3d = [0.] * 3
      if self.mat33f is None:
        self.mat33f = [0.] * 9
    else:
      self.data_type = 0
      self.b = False
      self.d = 0.
      self.f = 0.
      self.i = 0
      self.ll = 0
      self.s = ''
      self.vec3d = [0.] * 3
      self.mat33f = [0.] * 9

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2Bdfiq().pack(_x.data_type, _x.b, _x.d, _x.f, _x.i, _x.ll))
      _x = self.s
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(_get_struct_3d().pack(*self.vec3d))
      buff.write(_get_struct_9f().pack(*self.mat33f))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.data_type, _x.b, _x.d, _x.f, _x.i, _x.ll,) = _get_struct_2Bdfiq().unpack(str[start:end])
      self.b = bool(self.b)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.s = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.s = str[start:end]
      start = end
      end += 24
      self.vec3d = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 36
      self.mat33f = _get_struct_9f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2Bdfiq().pack(_x.data_type, _x.b, _x.d, _x.f, _x.i, _x.ll))
      _x = self.s
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      buff.write(self.vec3d.tostring())
      buff.write(self.mat33f.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.data_type, _x.b, _x.d, _x.f, _x.i, _x.ll,) = _get_struct_2Bdfiq().unpack(str[start:end])
      self.b = bool(self.b)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.s = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.s = str[start:end]
      start = end
      end += 24
      self.vec3d = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=3)
      start = end
      end += 36
      self.mat33f = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=9)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2Bdfiq = None
def _get_struct_2Bdfiq():
    global _struct_2Bdfiq
    if _struct_2Bdfiq is None:
        _struct_2Bdfiq = struct.Struct("<2Bdfiq")
    return _struct_2Bdfiq
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_9f = None
def _get_struct_9f():
    global _struct_9f
    if _struct_9f is None:
        _struct_9f = struct.Struct("<9f")
    return _struct_9f

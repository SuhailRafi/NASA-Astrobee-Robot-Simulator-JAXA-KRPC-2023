# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ff_msgs/DockResult.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DockResult(genpy.Message):
  _md5sum = "0cc69ac3a301c7996578d2ee3e9b92a6"
  _type = "ff_msgs/DockResult"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

# Result
int32 response
int32 CANCELLED                          = 5
int32 ALREADY_DOCKED                     = 4
int32 ALREADY_UNDOCKED                   = 3
int32 UNDOCKED                           = 2
int32 DOCKED                             = 1
int32 PREEMPTED                          = 0
int32 INVALID_COMMAND                    = -1
int32 INVALID_BERTH                      = -2
int32 NOT_IN_UNDOCKED_STATE              = -3
int32 NOT_IN_DOCKED_STATE                = -4
int32 SWITCH_TO_ML_FAILED                = -5
int32 SWITCH_TO_AR_FAILED                = -6
int32 SWITCH_TO_NO_FAILED                = -7
int32 PREP_DISABLE_FAILED                = -8
int32 PREP_ENABLE_FAILED                 = -9
int32 MOTION_APPROACH_FAILED             = -10
int32 MOTION_COMPLETE_FAILED             = -11
int32 MOTION_ATTACHED_FAILED             = -12
int32 EPS_UNDOCK_FAILED                  = -13
int32 EPS_DOCK_FAILED                    = -14
int32 TOO_FAR_AWAY_FROM_APPROACH         = -15

# Human readable FSM result for debugging
string fsm_result

"""
  # Pseudo-constants
  CANCELLED = 5
  ALREADY_DOCKED = 4
  ALREADY_UNDOCKED = 3
  UNDOCKED = 2
  DOCKED = 1
  PREEMPTED = 0
  INVALID_COMMAND = -1
  INVALID_BERTH = -2
  NOT_IN_UNDOCKED_STATE = -3
  NOT_IN_DOCKED_STATE = -4
  SWITCH_TO_ML_FAILED = -5
  SWITCH_TO_AR_FAILED = -6
  SWITCH_TO_NO_FAILED = -7
  PREP_DISABLE_FAILED = -8
  PREP_ENABLE_FAILED = -9
  MOTION_APPROACH_FAILED = -10
  MOTION_COMPLETE_FAILED = -11
  MOTION_ATTACHED_FAILED = -12
  EPS_UNDOCK_FAILED = -13
  EPS_DOCK_FAILED = -14
  TOO_FAR_AWAY_FROM_APPROACH = -15

  __slots__ = ['response','fsm_result']
  _slot_types = ['int32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       response,fsm_result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DockResult, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.response is None:
        self.response = 0
      if self.fsm_result is None:
        self.fsm_result = ''
    else:
      self.response = 0
      self.fsm_result = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.response
      buff.write(_get_struct_i().pack(_x))
      _x = self.fsm_result
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.response,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fsm_result = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fsm_result = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.response
      buff.write(_get_struct_i().pack(_x))
      _x = self.fsm_result
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.response,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fsm_result = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fsm_result = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i

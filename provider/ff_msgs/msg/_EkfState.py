# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ff_msgs/EkfState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class EkfState(genpy.Message):
  _md5sum = "543b97822b033d7199b506ad4005f134"
  _type = "ff_msgs/EkfState"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# Copyright (c) 2017, United States Government, as represented by the
# Administrator of the National Aeronautics and Space Administration.
#
# All rights reserved.
#
# The Astrobee platform is licensed under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with the
# License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# An observation of a handrail from a depth image.

std_msgs/Header header # header with timestamp
string child_frame_id # frame ID

geometry_msgs/Pose pose # robot body pose

# m/s
geometry_msgs/Vector3 velocity # the body velocity

# rad/s
geometry_msgs/Vector3 omega # body rotational velocity
geometry_msgs/Vector3 gyro_bias # estimated gyro bias

# m/s/s
geometry_msgs/Vector3 accel # acceleration in body frame
geometry_msgs/Vector3 accel_bias # estimated accel bias

# Filter Health

# covariance diagonal. 1-3 orientation, 4-6 gyro bias, 7-9 velocity, 10-12 accel bias, 13-15 position
float32[15] cov_diag
# confidence in EKF. 0 is good, 1 is a bit confused, 2 is lost
uint8 confidence
uint8 CONFIDENCE_GOOD = 0	# Tracking well
uint8 CONFIDENCE_POOR = 1	# Tracking poorly
uint8 CONFIDENCE_LOST = 2	# We are lost

uint8 aug_state_enum # bitmask of augmented states intialized

# status byte sent by GNC
uint8 status
uint8 STATUS_INVALID = 255	# invalid

# optical flow features this frame (0 if no update)
uint8 of_count
# ml features this frame (0 if no update)
uint8 ml_count

# Global Handrail Pose
geometry_msgs/Pose hr_global_pose

# mahalanobis distances for features
float32[50] ml_mahal_dists

# Are we busy estimating the bias?
bool estimating_bias

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  # Pseudo-constants
  CONFIDENCE_GOOD = 0
  CONFIDENCE_POOR = 1
  CONFIDENCE_LOST = 2
  STATUS_INVALID = 255

  __slots__ = ['header','child_frame_id','pose','velocity','omega','gyro_bias','accel','accel_bias','cov_diag','confidence','aug_state_enum','status','of_count','ml_count','hr_global_pose','ml_mahal_dists','estimating_bias']
  _slot_types = ['std_msgs/Header','string','geometry_msgs/Pose','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','float32[15]','uint8','uint8','uint8','uint8','uint8','geometry_msgs/Pose','float32[50]','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,child_frame_id,pose,velocity,omega,gyro_bias,accel,accel_bias,cov_diag,confidence,aug_state_enum,status,of_count,ml_count,hr_global_pose,ml_mahal_dists,estimating_bias

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EkfState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.child_frame_id is None:
        self.child_frame_id = ''
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.omega is None:
        self.omega = geometry_msgs.msg.Vector3()
      if self.gyro_bias is None:
        self.gyro_bias = geometry_msgs.msg.Vector3()
      if self.accel is None:
        self.accel = geometry_msgs.msg.Vector3()
      if self.accel_bias is None:
        self.accel_bias = geometry_msgs.msg.Vector3()
      if self.cov_diag is None:
        self.cov_diag = [0.] * 15
      if self.confidence is None:
        self.confidence = 0
      if self.aug_state_enum is None:
        self.aug_state_enum = 0
      if self.status is None:
        self.status = 0
      if self.of_count is None:
        self.of_count = 0
      if self.ml_count is None:
        self.ml_count = 0
      if self.hr_global_pose is None:
        self.hr_global_pose = geometry_msgs.msg.Pose()
      if self.ml_mahal_dists is None:
        self.ml_mahal_dists = [0.] * 50
      if self.estimating_bias is None:
        self.estimating_bias = False
    else:
      self.header = std_msgs.msg.Header()
      self.child_frame_id = ''
      self.pose = geometry_msgs.msg.Pose()
      self.velocity = geometry_msgs.msg.Vector3()
      self.omega = geometry_msgs.msg.Vector3()
      self.gyro_bias = geometry_msgs.msg.Vector3()
      self.accel = geometry_msgs.msg.Vector3()
      self.accel_bias = geometry_msgs.msg.Vector3()
      self.cov_diag = [0.] * 15
      self.confidence = 0
      self.aug_state_enum = 0
      self.status = 0
      self.of_count = 0
      self.ml_count = 0
      self.hr_global_pose = geometry_msgs.msg.Pose()
      self.ml_mahal_dists = [0.] * 50
      self.estimating_bias = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_22d().pack(_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.omega.x, _x.omega.y, _x.omega.z, _x.gyro_bias.x, _x.gyro_bias.y, _x.gyro_bias.z, _x.accel.x, _x.accel.y, _x.accel.z, _x.accel_bias.x, _x.accel_bias.y, _x.accel_bias.z))
      buff.write(_get_struct_15f().pack(*self.cov_diag))
      _x = self
      buff.write(_get_struct_5B7d().pack(_x.confidence, _x.aug_state_enum, _x.status, _x.of_count, _x.ml_count, _x.hr_global_pose.position.x, _x.hr_global_pose.position.y, _x.hr_global_pose.position.z, _x.hr_global_pose.orientation.x, _x.hr_global_pose.orientation.y, _x.hr_global_pose.orientation.z, _x.hr_global_pose.orientation.w))
      buff.write(_get_struct_50f().pack(*self.ml_mahal_dists))
      _x = self.estimating_bias
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.omega is None:
        self.omega = geometry_msgs.msg.Vector3()
      if self.gyro_bias is None:
        self.gyro_bias = geometry_msgs.msg.Vector3()
      if self.accel is None:
        self.accel = geometry_msgs.msg.Vector3()
      if self.accel_bias is None:
        self.accel_bias = geometry_msgs.msg.Vector3()
      if self.hr_global_pose is None:
        self.hr_global_pose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 176
      (_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.omega.x, _x.omega.y, _x.omega.z, _x.gyro_bias.x, _x.gyro_bias.y, _x.gyro_bias.z, _x.accel.x, _x.accel.y, _x.accel.z, _x.accel_bias.x, _x.accel_bias.y, _x.accel_bias.z,) = _get_struct_22d().unpack(str[start:end])
      start = end
      end += 60
      self.cov_diag = _get_struct_15f().unpack(str[start:end])
      _x = self
      start = end
      end += 61
      (_x.confidence, _x.aug_state_enum, _x.status, _x.of_count, _x.ml_count, _x.hr_global_pose.position.x, _x.hr_global_pose.position.y, _x.hr_global_pose.position.z, _x.hr_global_pose.orientation.x, _x.hr_global_pose.orientation.y, _x.hr_global_pose.orientation.z, _x.hr_global_pose.orientation.w,) = _get_struct_5B7d().unpack(str[start:end])
      start = end
      end += 200
      self.ml_mahal_dists = _get_struct_50f().unpack(str[start:end])
      start = end
      end += 1
      (self.estimating_bias,) = _get_struct_B().unpack(str[start:end])
      self.estimating_bias = bool(self.estimating_bias)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_22d().pack(_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.omega.x, _x.omega.y, _x.omega.z, _x.gyro_bias.x, _x.gyro_bias.y, _x.gyro_bias.z, _x.accel.x, _x.accel.y, _x.accel.z, _x.accel_bias.x, _x.accel_bias.y, _x.accel_bias.z))
      buff.write(self.cov_diag.tostring())
      _x = self
      buff.write(_get_struct_5B7d().pack(_x.confidence, _x.aug_state_enum, _x.status, _x.of_count, _x.ml_count, _x.hr_global_pose.position.x, _x.hr_global_pose.position.y, _x.hr_global_pose.position.z, _x.hr_global_pose.orientation.x, _x.hr_global_pose.orientation.y, _x.hr_global_pose.orientation.z, _x.hr_global_pose.orientation.w))
      buff.write(self.ml_mahal_dists.tostring())
      _x = self.estimating_bias
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.omega is None:
        self.omega = geometry_msgs.msg.Vector3()
      if self.gyro_bias is None:
        self.gyro_bias = geometry_msgs.msg.Vector3()
      if self.accel is None:
        self.accel = geometry_msgs.msg.Vector3()
      if self.accel_bias is None:
        self.accel_bias = geometry_msgs.msg.Vector3()
      if self.hr_global_pose is None:
        self.hr_global_pose = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 176
      (_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.omega.x, _x.omega.y, _x.omega.z, _x.gyro_bias.x, _x.gyro_bias.y, _x.gyro_bias.z, _x.accel.x, _x.accel.y, _x.accel.z, _x.accel_bias.x, _x.accel_bias.y, _x.accel_bias.z,) = _get_struct_22d().unpack(str[start:end])
      start = end
      end += 60
      self.cov_diag = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=15)
      _x = self
      start = end
      end += 61
      (_x.confidence, _x.aug_state_enum, _x.status, _x.of_count, _x.ml_count, _x.hr_global_pose.position.x, _x.hr_global_pose.position.y, _x.hr_global_pose.position.z, _x.hr_global_pose.orientation.x, _x.hr_global_pose.orientation.y, _x.hr_global_pose.orientation.z, _x.hr_global_pose.orientation.w,) = _get_struct_5B7d().unpack(str[start:end])
      start = end
      end += 200
      self.ml_mahal_dists = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=50)
      start = end
      end += 1
      (self.estimating_bias,) = _get_struct_B().unpack(str[start:end])
      self.estimating_bias = bool(self.estimating_bias)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_15f = None
def _get_struct_15f():
    global _struct_15f
    if _struct_15f is None:
        _struct_15f = struct.Struct("<15f")
    return _struct_15f
_struct_22d = None
def _get_struct_22d():
    global _struct_22d
    if _struct_22d is None:
        _struct_22d = struct.Struct("<22d")
    return _struct_22d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_50f = None
def _get_struct_50f():
    global _struct_50f
    if _struct_50f is None:
        _struct_50f = struct.Struct("<50f")
    return _struct_50f
_struct_5B7d = None
def _get_struct_5B7d():
    global _struct_5B7d
    if _struct_5B7d is None:
        _struct_5B7d = struct.Struct("<5B7d")
    return _struct_5B7d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B

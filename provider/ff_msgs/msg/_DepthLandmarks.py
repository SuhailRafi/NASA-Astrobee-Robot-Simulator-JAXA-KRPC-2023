# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ff_msgs/DepthLandmarks.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ff_msgs.msg
import geometry_msgs.msg
import std_msgs.msg

class DepthLandmarks(genpy.Message):
  _md5sum = "7fc86a54f996c15d2798a19b023404dc"
  _type = "ff_msgs/DepthLandmarks"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# Copyright (c) 2017, United States Government, as represented by the
# Administrator of the National Aeronautics and Space Administration.
#
# All rights reserved.
#
# The Astrobee platform is licensed under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with the
# License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# An observation of a handrail from a depth image.

Header header                                  # Image header, with time stamp
uint32 camera_id                               # Image ID, associated with registration
uint8 end_seen                                 # Whether the handrail endpoint was detected
uint8 update_global_pose                       # Whether to update the global pose
geometry_msgs/Pose sensor_T_handrail           # Handrail center in the sensor frame
geometry_msgs/Point32[] sensor_t_line_points   # Detected line points
geometry_msgs/Point[] sensor_t_line_endpoints  # Detected line endpoints
geometry_msgs/Point32[] sensor_t_plane_points  # Detected plane points
ff_msgs/DepthLandmark[] landmarks              # List of landmarks seen TODO(rsoussan): This should be removed

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
================================================================================
MSG: ff_msgs/DepthLandmark
# Copyright (c) 2017, United States Government, as represented by the
# Administrator of the National Aeronautics and Space Administration.
#
# All rights reserved.
#
# The Astrobee platform is licensed under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with the
# License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# A landmark seen from a depth landmark

float32 u     # First coordinate in the image plane
float32 v     # Second coordinate in the image plane
float32 w     # Depth
"""
  __slots__ = ['header','camera_id','end_seen','update_global_pose','sensor_T_handrail','sensor_t_line_points','sensor_t_line_endpoints','sensor_t_plane_points','landmarks']
  _slot_types = ['std_msgs/Header','uint32','uint8','uint8','geometry_msgs/Pose','geometry_msgs/Point32[]','geometry_msgs/Point[]','geometry_msgs/Point32[]','ff_msgs/DepthLandmark[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,camera_id,end_seen,update_global_pose,sensor_T_handrail,sensor_t_line_points,sensor_t_line_endpoints,sensor_t_plane_points,landmarks

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DepthLandmarks, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.camera_id is None:
        self.camera_id = 0
      if self.end_seen is None:
        self.end_seen = 0
      if self.update_global_pose is None:
        self.update_global_pose = 0
      if self.sensor_T_handrail is None:
        self.sensor_T_handrail = geometry_msgs.msg.Pose()
      if self.sensor_t_line_points is None:
        self.sensor_t_line_points = []
      if self.sensor_t_line_endpoints is None:
        self.sensor_t_line_endpoints = []
      if self.sensor_t_plane_points is None:
        self.sensor_t_plane_points = []
      if self.landmarks is None:
        self.landmarks = []
    else:
      self.header = std_msgs.msg.Header()
      self.camera_id = 0
      self.end_seen = 0
      self.update_global_pose = 0
      self.sensor_T_handrail = geometry_msgs.msg.Pose()
      self.sensor_t_line_points = []
      self.sensor_t_line_endpoints = []
      self.sensor_t_plane_points = []
      self.landmarks = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_I2B7d().pack(_x.camera_id, _x.end_seen, _x.update_global_pose, _x.sensor_T_handrail.position.x, _x.sensor_T_handrail.position.y, _x.sensor_T_handrail.position.z, _x.sensor_T_handrail.orientation.x, _x.sensor_T_handrail.orientation.y, _x.sensor_T_handrail.orientation.z, _x.sensor_T_handrail.orientation.w))
      length = len(self.sensor_t_line_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.sensor_t_line_points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.sensor_t_line_endpoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.sensor_t_line_endpoints:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.sensor_t_plane_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.sensor_t_plane_points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.landmarks)
      buff.write(_struct_I.pack(length))
      for val1 in self.landmarks:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.u, _x.v, _x.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.sensor_T_handrail is None:
        self.sensor_T_handrail = geometry_msgs.msg.Pose()
      if self.sensor_t_line_points is None:
        self.sensor_t_line_points = None
      if self.sensor_t_line_endpoints is None:
        self.sensor_t_line_endpoints = None
      if self.sensor_t_plane_points is None:
        self.sensor_t_plane_points = None
      if self.landmarks is None:
        self.landmarks = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 62
      (_x.camera_id, _x.end_seen, _x.update_global_pose, _x.sensor_T_handrail.position.x, _x.sensor_T_handrail.position.y, _x.sensor_T_handrail.position.z, _x.sensor_T_handrail.orientation.x, _x.sensor_T_handrail.orientation.y, _x.sensor_T_handrail.orientation.z, _x.sensor_T_handrail.orientation.w,) = _get_struct_I2B7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sensor_t_line_points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.sensor_t_line_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sensor_t_line_endpoints = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.sensor_t_line_endpoints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sensor_t_plane_points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.sensor_t_plane_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.landmarks = []
      for i in range(0, length):
        val1 = ff_msgs.msg.DepthLandmark()
        _x = val1
        start = end
        end += 12
        (_x.u, _x.v, _x.w,) = _get_struct_3f().unpack(str[start:end])
        self.landmarks.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_I2B7d().pack(_x.camera_id, _x.end_seen, _x.update_global_pose, _x.sensor_T_handrail.position.x, _x.sensor_T_handrail.position.y, _x.sensor_T_handrail.position.z, _x.sensor_T_handrail.orientation.x, _x.sensor_T_handrail.orientation.y, _x.sensor_T_handrail.orientation.z, _x.sensor_T_handrail.orientation.w))
      length = len(self.sensor_t_line_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.sensor_t_line_points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.sensor_t_line_endpoints)
      buff.write(_struct_I.pack(length))
      for val1 in self.sensor_t_line_endpoints:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      length = len(self.sensor_t_plane_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.sensor_t_plane_points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.landmarks)
      buff.write(_struct_I.pack(length))
      for val1 in self.landmarks:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.u, _x.v, _x.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.sensor_T_handrail is None:
        self.sensor_T_handrail = geometry_msgs.msg.Pose()
      if self.sensor_t_line_points is None:
        self.sensor_t_line_points = None
      if self.sensor_t_line_endpoints is None:
        self.sensor_t_line_endpoints = None
      if self.sensor_t_plane_points is None:
        self.sensor_t_plane_points = None
      if self.landmarks is None:
        self.landmarks = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 62
      (_x.camera_id, _x.end_seen, _x.update_global_pose, _x.sensor_T_handrail.position.x, _x.sensor_T_handrail.position.y, _x.sensor_T_handrail.position.z, _x.sensor_T_handrail.orientation.x, _x.sensor_T_handrail.orientation.y, _x.sensor_T_handrail.orientation.z, _x.sensor_T_handrail.orientation.w,) = _get_struct_I2B7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sensor_t_line_points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.sensor_t_line_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sensor_t_line_endpoints = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.sensor_t_line_endpoints.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.sensor_t_plane_points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.sensor_t_plane_points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.landmarks = []
      for i in range(0, length):
        val1 = ff_msgs.msg.DepthLandmark()
        _x = val1
        start = end
        end += 12
        (_x.u, _x.v, _x.w,) = _get_struct_3f().unpack(str[start:end])
        self.landmarks.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_I2B7d = None
def _get_struct_I2B7d():
    global _struct_I2B7d
    if _struct_I2B7d is None:
        _struct_I2B7d = struct.Struct("<I2B7d")
    return _struct_I2B7d

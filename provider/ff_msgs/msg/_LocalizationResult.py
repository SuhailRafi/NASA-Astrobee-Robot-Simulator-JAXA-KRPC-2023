# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ff_msgs/LocalizationResult.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class LocalizationResult(genpy.Message):
  _md5sum = "309c1ead50fb170acfed9e9b67a66d27"
  _type = "ff_msgs/LocalizationResult"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

int32 response
int32 PIPELINE_ALREADY_ACTIVE     =  2   # We are already on this mode
int32 SUCCESS                     =  1   # The switch was successful
int32 PREEMPTED                   =  0   # Preempted by another action goal
int32 CANCELLED                   = -1   # We canceled our own request
int32 INVALID_PIPELINE            = -2   # Not a valid pipeline in command
int32 INVALID_COMMAND             = -3   # Not a valid command type
int32 FILTER_NOT_IN_USE           = -4   # Reset/bias requires filter
int32 OPTICAL_FLOW_FAILED         = -5   # Optical flow could not be toggled
int32 PIPELINE_TOGGLE_FAILED      = -6   # Pipeline could not be toggled
int32 PIPELINE_USE_FAILED         = -7   # Pipeline could not be used
int32 PIPELINE_UNSTABLE           = -8   # Pipeline did not go stable
int32 SET_INPUT_FAILED            = -9   # EKF could not be set to new mode
int32 ESTIMATE_BIAS_FAILED        = -10  # Estimate bias service call failed
int32 RESET_FAILED                = -11  # Reset service call failed

# Human readable FSM result for debugging
string fsm_result

"""
  # Pseudo-constants
  PIPELINE_ALREADY_ACTIVE = 2
  SUCCESS = 1
  PREEMPTED = 0
  CANCELLED = -1
  INVALID_PIPELINE = -2
  INVALID_COMMAND = -3
  FILTER_NOT_IN_USE = -4
  OPTICAL_FLOW_FAILED = -5
  PIPELINE_TOGGLE_FAILED = -6
  PIPELINE_USE_FAILED = -7
  PIPELINE_UNSTABLE = -8
  SET_INPUT_FAILED = -9
  ESTIMATE_BIAS_FAILED = -10
  RESET_FAILED = -11

  __slots__ = ['response','fsm_result']
  _slot_types = ['int32','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       response,fsm_result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LocalizationResult, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.response is None:
        self.response = 0
      if self.fsm_result is None:
        self.fsm_result = ''
    else:
      self.response = 0
      self.fsm_result = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.response
      buff.write(_get_struct_i().pack(_x))
      _x = self.fsm_result
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.response,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fsm_result = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fsm_result = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.response
      buff.write(_get_struct_i().pack(_x))
      _x = self.fsm_result
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (self.response,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fsm_result = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fsm_result = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i

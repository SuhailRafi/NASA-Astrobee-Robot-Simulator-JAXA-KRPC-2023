# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ff_msgs/ControlFeedback.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import ff_msgs.msg
import genpy
import geometry_msgs.msg

class ControlFeedback(genpy.Message):
  _md5sum = "1e2dd668bd0bc39b8d613faad6d7b071"
  _type = "ff_msgs/ControlFeedback"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

uint32 index                                # Index being processed

ff_msgs/ControlState setpoint               # Current setpoint

float32 error_position                      # Position error
float32 error_attitude                      # Attitude error
float32 error_velocity                      # Velocity error
float32 error_omega                         # Omega error


================================================================================
MSG: ff_msgs/ControlState
# Copyright (c) 2017, United States Government, as represented by the
# Administrator of the National Aeronautics and Space Administration.
# 
# All rights reserved.
# 
# The Astrobee platform is licensed under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with the
# License. You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# Full state vector containing Time, Pose, Vel, and Accel
# 
# when {time}
# flight_mode {string} - disctates, gains, tolerances, etc.
# pose {Point position, Quaternion orientation}
# twist {Vector3 linear, Vector3 angular}
# accel {Vector3 linear, Vector3 angular}

time when
geometry_msgs/Pose pose
geometry_msgs/Twist twist
geometry_msgs/Twist accel

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['index','setpoint','error_position','error_attitude','error_velocity','error_omega']
  _slot_types = ['uint32','ff_msgs/ControlState','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       index,setpoint,error_position,error_attitude,error_velocity,error_omega

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ControlFeedback, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.index is None:
        self.index = 0
      if self.setpoint is None:
        self.setpoint = ff_msgs.msg.ControlState()
      if self.error_position is None:
        self.error_position = 0.
      if self.error_attitude is None:
        self.error_attitude = 0.
      if self.error_velocity is None:
        self.error_velocity = 0.
      if self.error_omega is None:
        self.error_omega = 0.
    else:
      self.index = 0
      self.setpoint = ff_msgs.msg.ControlState()
      self.error_position = 0.
      self.error_attitude = 0.
      self.error_velocity = 0.
      self.error_omega = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I19d4f().pack(_x.index, _x.setpoint.when.secs, _x.setpoint.when.nsecs, _x.setpoint.pose.position.x, _x.setpoint.pose.position.y, _x.setpoint.pose.position.z, _x.setpoint.pose.orientation.x, _x.setpoint.pose.orientation.y, _x.setpoint.pose.orientation.z, _x.setpoint.pose.orientation.w, _x.setpoint.twist.linear.x, _x.setpoint.twist.linear.y, _x.setpoint.twist.linear.z, _x.setpoint.twist.angular.x, _x.setpoint.twist.angular.y, _x.setpoint.twist.angular.z, _x.setpoint.accel.linear.x, _x.setpoint.accel.linear.y, _x.setpoint.accel.linear.z, _x.setpoint.accel.angular.x, _x.setpoint.accel.angular.y, _x.setpoint.accel.angular.z, _x.error_position, _x.error_attitude, _x.error_velocity, _x.error_omega))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.setpoint is None:
        self.setpoint = ff_msgs.msg.ControlState()
      end = 0
      _x = self
      start = end
      end += 180
      (_x.index, _x.setpoint.when.secs, _x.setpoint.when.nsecs, _x.setpoint.pose.position.x, _x.setpoint.pose.position.y, _x.setpoint.pose.position.z, _x.setpoint.pose.orientation.x, _x.setpoint.pose.orientation.y, _x.setpoint.pose.orientation.z, _x.setpoint.pose.orientation.w, _x.setpoint.twist.linear.x, _x.setpoint.twist.linear.y, _x.setpoint.twist.linear.z, _x.setpoint.twist.angular.x, _x.setpoint.twist.angular.y, _x.setpoint.twist.angular.z, _x.setpoint.accel.linear.x, _x.setpoint.accel.linear.y, _x.setpoint.accel.linear.z, _x.setpoint.accel.angular.x, _x.setpoint.accel.angular.y, _x.setpoint.accel.angular.z, _x.error_position, _x.error_attitude, _x.error_velocity, _x.error_omega,) = _get_struct_3I19d4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I19d4f().pack(_x.index, _x.setpoint.when.secs, _x.setpoint.when.nsecs, _x.setpoint.pose.position.x, _x.setpoint.pose.position.y, _x.setpoint.pose.position.z, _x.setpoint.pose.orientation.x, _x.setpoint.pose.orientation.y, _x.setpoint.pose.orientation.z, _x.setpoint.pose.orientation.w, _x.setpoint.twist.linear.x, _x.setpoint.twist.linear.y, _x.setpoint.twist.linear.z, _x.setpoint.twist.angular.x, _x.setpoint.twist.angular.y, _x.setpoint.twist.angular.z, _x.setpoint.accel.linear.x, _x.setpoint.accel.linear.y, _x.setpoint.accel.linear.z, _x.setpoint.accel.angular.x, _x.setpoint.accel.angular.y, _x.setpoint.accel.angular.z, _x.error_position, _x.error_attitude, _x.error_velocity, _x.error_omega))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.setpoint is None:
        self.setpoint = ff_msgs.msg.ControlState()
      end = 0
      _x = self
      start = end
      end += 180
      (_x.index, _x.setpoint.when.secs, _x.setpoint.when.nsecs, _x.setpoint.pose.position.x, _x.setpoint.pose.position.y, _x.setpoint.pose.position.z, _x.setpoint.pose.orientation.x, _x.setpoint.pose.orientation.y, _x.setpoint.pose.orientation.z, _x.setpoint.pose.orientation.w, _x.setpoint.twist.linear.x, _x.setpoint.twist.linear.y, _x.setpoint.twist.linear.z, _x.setpoint.twist.angular.x, _x.setpoint.twist.angular.y, _x.setpoint.twist.angular.z, _x.setpoint.accel.linear.x, _x.setpoint.accel.linear.y, _x.setpoint.accel.linear.z, _x.setpoint.accel.angular.x, _x.setpoint.accel.angular.y, _x.setpoint.accel.angular.z, _x.error_position, _x.error_attitude, _x.error_velocity, _x.error_omega,) = _get_struct_3I19d4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I19d4f = None
def _get_struct_3I19d4f():
    global _struct_3I19d4f
    if _struct_3I19d4f is None:
        _struct_3I19d4f = struct.Struct("<3I19d4f")
    return _struct_3I19d4f

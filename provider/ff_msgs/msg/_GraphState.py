# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ff_msgs/GraphState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class GraphState(genpy.Message):
  _md5sum = "d0020fbc20fe81214e0f3f2b41dd4c22"
  _type = "ff_msgs/GraphState"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# Copyright (c) 2017, United States Government, as represented by the
# Administrator of the National Aeronautics and Space Administration.
#
# All rights reserved.
#
# The Astrobee platform is licensed under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with the
# License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

std_msgs/Header header # header with timestamp
string child_frame_id # frame ID
# State Estimates
geometry_msgs/Pose pose # world_T_body 
geometry_msgs/Vector3 velocity # body velocity
geometry_msgs/Vector3 gyro_bias # estimated gyro bias
geometry_msgs/Vector3 accel_bias # estimated accel bias
# Covariances/Confidences
# covariance diagonal. 1-3 orientation, 4-6 gyro bias, 7-9 velocity, 10-12 accel bias, 13-15 position
float32[15] cov_diag
# confidence in estimate. 0 is good, 1 is a bit confused, 2 is lost
uint8 confidence
uint8 CONFIDENCE_GOOD = 0	# Tracking well
uint8 CONFIDENCE_POOR = 1	# Tracking poorly
uint8 CONFIDENCE_LOST = 2	# We are lost
# Stats
uint32 num_detected_of_features  
uint32 num_detected_ar_features 
uint32 num_detected_ml_features 
uint32 iterations # Optimization iterations
float32 optimization_time
float32 update_time # Include optimization_time and other operations to add data to graph
float32 callbacks_time # Includes processing msgs and their callbacks
float32 nodelet_runtime # Total runtime of nodelet iteration.  Includes update and callback time
uint32 num_factors
uint32 num_of_factors
uint32 num_ml_projection_factors
uint32 num_ml_pose_factors
uint32 num_states
# Status
bool standstill
bool estimating_bias # Are we busy estimating the bias?
uint8 fan_speed_mode # Used for imu filtering

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  # Pseudo-constants
  CONFIDENCE_GOOD = 0
  CONFIDENCE_POOR = 1
  CONFIDENCE_LOST = 2

  __slots__ = ['header','child_frame_id','pose','velocity','gyro_bias','accel_bias','cov_diag','confidence','num_detected_of_features','num_detected_ar_features','num_detected_ml_features','iterations','optimization_time','update_time','callbacks_time','nodelet_runtime','num_factors','num_of_factors','num_ml_projection_factors','num_ml_pose_factors','num_states','standstill','estimating_bias','fan_speed_mode']
  _slot_types = ['std_msgs/Header','string','geometry_msgs/Pose','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','float32[15]','uint8','uint32','uint32','uint32','uint32','float32','float32','float32','float32','uint32','uint32','uint32','uint32','uint32','bool','bool','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,child_frame_id,pose,velocity,gyro_bias,accel_bias,cov_diag,confidence,num_detected_of_features,num_detected_ar_features,num_detected_ml_features,iterations,optimization_time,update_time,callbacks_time,nodelet_runtime,num_factors,num_of_factors,num_ml_projection_factors,num_ml_pose_factors,num_states,standstill,estimating_bias,fan_speed_mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GraphState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.child_frame_id is None:
        self.child_frame_id = ''
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.gyro_bias is None:
        self.gyro_bias = geometry_msgs.msg.Vector3()
      if self.accel_bias is None:
        self.accel_bias = geometry_msgs.msg.Vector3()
      if self.cov_diag is None:
        self.cov_diag = [0.] * 15
      if self.confidence is None:
        self.confidence = 0
      if self.num_detected_of_features is None:
        self.num_detected_of_features = 0
      if self.num_detected_ar_features is None:
        self.num_detected_ar_features = 0
      if self.num_detected_ml_features is None:
        self.num_detected_ml_features = 0
      if self.iterations is None:
        self.iterations = 0
      if self.optimization_time is None:
        self.optimization_time = 0.
      if self.update_time is None:
        self.update_time = 0.
      if self.callbacks_time is None:
        self.callbacks_time = 0.
      if self.nodelet_runtime is None:
        self.nodelet_runtime = 0.
      if self.num_factors is None:
        self.num_factors = 0
      if self.num_of_factors is None:
        self.num_of_factors = 0
      if self.num_ml_projection_factors is None:
        self.num_ml_projection_factors = 0
      if self.num_ml_pose_factors is None:
        self.num_ml_pose_factors = 0
      if self.num_states is None:
        self.num_states = 0
      if self.standstill is None:
        self.standstill = False
      if self.estimating_bias is None:
        self.estimating_bias = False
      if self.fan_speed_mode is None:
        self.fan_speed_mode = 0
    else:
      self.header = std_msgs.msg.Header()
      self.child_frame_id = ''
      self.pose = geometry_msgs.msg.Pose()
      self.velocity = geometry_msgs.msg.Vector3()
      self.gyro_bias = geometry_msgs.msg.Vector3()
      self.accel_bias = geometry_msgs.msg.Vector3()
      self.cov_diag = [0.] * 15
      self.confidence = 0
      self.num_detected_of_features = 0
      self.num_detected_ar_features = 0
      self.num_detected_ml_features = 0
      self.iterations = 0
      self.optimization_time = 0.
      self.update_time = 0.
      self.callbacks_time = 0.
      self.nodelet_runtime = 0.
      self.num_factors = 0
      self.num_of_factors = 0
      self.num_ml_projection_factors = 0
      self.num_ml_pose_factors = 0
      self.num_states = 0
      self.standstill = False
      self.estimating_bias = False
      self.fan_speed_mode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_16d().pack(_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.gyro_bias.x, _x.gyro_bias.y, _x.gyro_bias.z, _x.accel_bias.x, _x.accel_bias.y, _x.accel_bias.z))
      buff.write(_get_struct_15f().pack(*self.cov_diag))
      _x = self
      buff.write(_get_struct_B4I4f5I3B().pack(_x.confidence, _x.num_detected_of_features, _x.num_detected_ar_features, _x.num_detected_ml_features, _x.iterations, _x.optimization_time, _x.update_time, _x.callbacks_time, _x.nodelet_runtime, _x.num_factors, _x.num_of_factors, _x.num_ml_projection_factors, _x.num_ml_pose_factors, _x.num_states, _x.standstill, _x.estimating_bias, _x.fan_speed_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.gyro_bias is None:
        self.gyro_bias = geometry_msgs.msg.Vector3()
      if self.accel_bias is None:
        self.accel_bias = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 128
      (_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.gyro_bias.x, _x.gyro_bias.y, _x.gyro_bias.z, _x.accel_bias.x, _x.accel_bias.y, _x.accel_bias.z,) = _get_struct_16d().unpack(str[start:end])
      start = end
      end += 60
      self.cov_diag = _get_struct_15f().unpack(str[start:end])
      _x = self
      start = end
      end += 56
      (_x.confidence, _x.num_detected_of_features, _x.num_detected_ar_features, _x.num_detected_ml_features, _x.iterations, _x.optimization_time, _x.update_time, _x.callbacks_time, _x.nodelet_runtime, _x.num_factors, _x.num_of_factors, _x.num_ml_projection_factors, _x.num_ml_pose_factors, _x.num_states, _x.standstill, _x.estimating_bias, _x.fan_speed_mode,) = _get_struct_B4I4f5I3B().unpack(str[start:end])
      self.standstill = bool(self.standstill)
      self.estimating_bias = bool(self.estimating_bias)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_16d().pack(_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.gyro_bias.x, _x.gyro_bias.y, _x.gyro_bias.z, _x.accel_bias.x, _x.accel_bias.y, _x.accel_bias.z))
      buff.write(self.cov_diag.tostring())
      _x = self
      buff.write(_get_struct_B4I4f5I3B().pack(_x.confidence, _x.num_detected_of_features, _x.num_detected_ar_features, _x.num_detected_ml_features, _x.iterations, _x.optimization_time, _x.update_time, _x.callbacks_time, _x.nodelet_runtime, _x.num_factors, _x.num_of_factors, _x.num_ml_projection_factors, _x.num_ml_pose_factors, _x.num_states, _x.standstill, _x.estimating_bias, _x.fan_speed_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.gyro_bias is None:
        self.gyro_bias = geometry_msgs.msg.Vector3()
      if self.accel_bias is None:
        self.accel_bias = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 128
      (_x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.velocity.x, _x.velocity.y, _x.velocity.z, _x.gyro_bias.x, _x.gyro_bias.y, _x.gyro_bias.z, _x.accel_bias.x, _x.accel_bias.y, _x.accel_bias.z,) = _get_struct_16d().unpack(str[start:end])
      start = end
      end += 60
      self.cov_diag = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=15)
      _x = self
      start = end
      end += 56
      (_x.confidence, _x.num_detected_of_features, _x.num_detected_ar_features, _x.num_detected_ml_features, _x.iterations, _x.optimization_time, _x.update_time, _x.callbacks_time, _x.nodelet_runtime, _x.num_factors, _x.num_of_factors, _x.num_ml_projection_factors, _x.num_ml_pose_factors, _x.num_states, _x.standstill, _x.estimating_bias, _x.fan_speed_mode,) = _get_struct_B4I4f5I3B().unpack(str[start:end])
      self.standstill = bool(self.standstill)
      self.estimating_bias = bool(self.estimating_bias)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_15f = None
def _get_struct_15f():
    global _struct_15f
    if _struct_15f is None:
        _struct_15f = struct.Struct("<15f")
    return _struct_15f
_struct_16d = None
def _get_struct_16d():
    global _struct_16d
    if _struct_16d is None:
        _struct_16d = struct.Struct("<16d")
    return _struct_16d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B4I4f5I3B = None
def _get_struct_B4I4f5I3B():
    global _struct_B4I4f5I3B
    if _struct_B4I4f5I3B is None:
        _struct_B4I4f5I3B = struct.Struct("<B4I4f5I3B")
    return _struct_B4I4f5I3B

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ff_msgs/Performance.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class Performance(genpy.Message):
  _md5sum = "04ada46adc18b617f396f9d156029c85"
  _type = "ff_msgs/Performance"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Copyright (c) 2017, United States Government, as represented by the
# Administrator of the National Aeronautics and Space Administration.
# 
# All rights reserved.
# 
# The Astrobee platform is licensed under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with the
# License. You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# Statistics used to measure performance.

time stamp
float32 count
float32 last
float32 min
float32 max
float32 mean
float32 stddev
float32 var
"""
  __slots__ = ['stamp','count','last','min','max','mean','stddev','var']
  _slot_types = ['time','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp,count,last,min,max,mean,stddev,var

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Performance, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.count is None:
        self.count = 0.
      if self.last is None:
        self.last = 0.
      if self.min is None:
        self.min = 0.
      if self.max is None:
        self.max = 0.
      if self.mean is None:
        self.mean = 0.
      if self.stddev is None:
        self.stddev = 0.
      if self.var is None:
        self.var = 0.
    else:
      self.stamp = genpy.Time()
      self.count = 0.
      self.last = 0.
      self.min = 0.
      self.max = 0.
      self.mean = 0.
      self.stddev = 0.
      self.var = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I7f().pack(_x.stamp.secs, _x.stamp.nsecs, _x.count, _x.last, _x.min, _x.max, _x.mean, _x.stddev, _x.var))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 36
      (_x.stamp.secs, _x.stamp.nsecs, _x.count, _x.last, _x.min, _x.max, _x.mean, _x.stddev, _x.var,) = _get_struct_2I7f().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I7f().pack(_x.stamp.secs, _x.stamp.nsecs, _x.count, _x.last, _x.min, _x.max, _x.mean, _x.stddev, _x.var))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 36
      (_x.stamp.secs, _x.stamp.nsecs, _x.count, _x.last, _x.min, _x.max, _x.mean, _x.stddev, _x.var,) = _get_struct_2I7f().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I7f = None
def _get_struct_2I7f():
    global _struct_2I7f
    if _struct_2I7f is None:
        _struct_2I7f = struct.Struct("<2I7f")
    return _struct_2I7f

# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ff_msgs/FlightMode.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class FlightMode(genpy.Message):
  _md5sum = "64fef5727fd56589af93ac307057592a"
  _type = "ff_msgs/FlightMode"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# Copyright (c) 2017, United States Government, as represented by the
# Administrator of the National Aeronautics and Space Administration.
#
# All rights reserved.
#
# The Astrobee platform is licensed under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with the
# License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# This message captures all information in a flight mode

Header header                     # Metadata

string name                       # Name of the flight mode

bool control_enabled              # Is control enabled?

float32 collision_radius          # Collision radius in meters

# Tolerances (all in SI units)
float32 tolerance_pos_endpoint    # Endpoint position tolerance in m
float32 tolerance_pos             # Position tolerance in m
float32 tolerance_vel             # Velocity tolerance in m/s
float32 tolerance_att             # Attitude tolerance in rads
float32 tolerance_omega           # Angular acceleration tolerance in rad/s
float32 tolerance_time            # Acceptable lag betwee TX and RX of control

# Controller gains
geometry_msgs/Vector3 att_kp      # Positional proportional constant
geometry_msgs/Vector3 att_ki      # Positional integrative constant
geometry_msgs/Vector3 omega_kd    # Attidue derivative constant
geometry_msgs/Vector3 pos_kp      # Positional proportional contant
geometry_msgs/Vector3 pos_ki      # Positional integrative constant
geometry_msgs/Vector3 vel_kd      # Positional derivative constant

# Hard limit on planning
float32 hard_limit_vel            # Position tolerance in m/s
float32 hard_limit_accel          # Position tolerance in m/s^2
float32 hard_limit_omega          # Position tolerance in rads/s
float32 hard_limit_alpha          # Position tolerance in rads/s^2

# Impeller speed
uint8 speed                       # Current speed gain
uint8 SPEED_MIN        = 0        # Min acceptable gain
uint8 SPEED_OFF        = 0        # Blowers off
uint8 SPEED_QUIET      = 1        # Quiet mode
uint8 SPEED_NOMINAL    = 2        # Nomainal mode
uint8 SPEED_AGGRESSIVE = 3        # Aggressive mode
uint8 SPEED_MAX        = 3        # Max acceptable gain

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  # Pseudo-constants
  SPEED_MIN = 0
  SPEED_OFF = 0
  SPEED_QUIET = 1
  SPEED_NOMINAL = 2
  SPEED_AGGRESSIVE = 3
  SPEED_MAX = 3

  __slots__ = ['header','name','control_enabled','collision_radius','tolerance_pos_endpoint','tolerance_pos','tolerance_vel','tolerance_att','tolerance_omega','tolerance_time','att_kp','att_ki','omega_kd','pos_kp','pos_ki','vel_kd','hard_limit_vel','hard_limit_accel','hard_limit_omega','hard_limit_alpha','speed']
  _slot_types = ['std_msgs/Header','string','bool','float32','float32','float32','float32','float32','float32','float32','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','float32','float32','float32','float32','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,name,control_enabled,collision_radius,tolerance_pos_endpoint,tolerance_pos,tolerance_vel,tolerance_att,tolerance_omega,tolerance_time,att_kp,att_ki,omega_kd,pos_kp,pos_ki,vel_kd,hard_limit_vel,hard_limit_accel,hard_limit_omega,hard_limit_alpha,speed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FlightMode, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.name is None:
        self.name = ''
      if self.control_enabled is None:
        self.control_enabled = False
      if self.collision_radius is None:
        self.collision_radius = 0.
      if self.tolerance_pos_endpoint is None:
        self.tolerance_pos_endpoint = 0.
      if self.tolerance_pos is None:
        self.tolerance_pos = 0.
      if self.tolerance_vel is None:
        self.tolerance_vel = 0.
      if self.tolerance_att is None:
        self.tolerance_att = 0.
      if self.tolerance_omega is None:
        self.tolerance_omega = 0.
      if self.tolerance_time is None:
        self.tolerance_time = 0.
      if self.att_kp is None:
        self.att_kp = geometry_msgs.msg.Vector3()
      if self.att_ki is None:
        self.att_ki = geometry_msgs.msg.Vector3()
      if self.omega_kd is None:
        self.omega_kd = geometry_msgs.msg.Vector3()
      if self.pos_kp is None:
        self.pos_kp = geometry_msgs.msg.Vector3()
      if self.pos_ki is None:
        self.pos_ki = geometry_msgs.msg.Vector3()
      if self.vel_kd is None:
        self.vel_kd = geometry_msgs.msg.Vector3()
      if self.hard_limit_vel is None:
        self.hard_limit_vel = 0.
      if self.hard_limit_accel is None:
        self.hard_limit_accel = 0.
      if self.hard_limit_omega is None:
        self.hard_limit_omega = 0.
      if self.hard_limit_alpha is None:
        self.hard_limit_alpha = 0.
      if self.speed is None:
        self.speed = 0
    else:
      self.header = std_msgs.msg.Header()
      self.name = ''
      self.control_enabled = False
      self.collision_radius = 0.
      self.tolerance_pos_endpoint = 0.
      self.tolerance_pos = 0.
      self.tolerance_vel = 0.
      self.tolerance_att = 0.
      self.tolerance_omega = 0.
      self.tolerance_time = 0.
      self.att_kp = geometry_msgs.msg.Vector3()
      self.att_ki = geometry_msgs.msg.Vector3()
      self.omega_kd = geometry_msgs.msg.Vector3()
      self.pos_kp = geometry_msgs.msg.Vector3()
      self.pos_ki = geometry_msgs.msg.Vector3()
      self.vel_kd = geometry_msgs.msg.Vector3()
      self.hard_limit_vel = 0.
      self.hard_limit_accel = 0.
      self.hard_limit_omega = 0.
      self.hard_limit_alpha = 0.
      self.speed = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B7f18d4fB().pack(_x.control_enabled, _x.collision_radius, _x.tolerance_pos_endpoint, _x.tolerance_pos, _x.tolerance_vel, _x.tolerance_att, _x.tolerance_omega, _x.tolerance_time, _x.att_kp.x, _x.att_kp.y, _x.att_kp.z, _x.att_ki.x, _x.att_ki.y, _x.att_ki.z, _x.omega_kd.x, _x.omega_kd.y, _x.omega_kd.z, _x.pos_kp.x, _x.pos_kp.y, _x.pos_kp.z, _x.pos_ki.x, _x.pos_ki.y, _x.pos_ki.z, _x.vel_kd.x, _x.vel_kd.y, _x.vel_kd.z, _x.hard_limit_vel, _x.hard_limit_accel, _x.hard_limit_omega, _x.hard_limit_alpha, _x.speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.att_kp is None:
        self.att_kp = geometry_msgs.msg.Vector3()
      if self.att_ki is None:
        self.att_ki = geometry_msgs.msg.Vector3()
      if self.omega_kd is None:
        self.omega_kd = geometry_msgs.msg.Vector3()
      if self.pos_kp is None:
        self.pos_kp = geometry_msgs.msg.Vector3()
      if self.pos_ki is None:
        self.pos_ki = geometry_msgs.msg.Vector3()
      if self.vel_kd is None:
        self.vel_kd = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 190
      (_x.control_enabled, _x.collision_radius, _x.tolerance_pos_endpoint, _x.tolerance_pos, _x.tolerance_vel, _x.tolerance_att, _x.tolerance_omega, _x.tolerance_time, _x.att_kp.x, _x.att_kp.y, _x.att_kp.z, _x.att_ki.x, _x.att_ki.y, _x.att_ki.z, _x.omega_kd.x, _x.omega_kd.y, _x.omega_kd.z, _x.pos_kp.x, _x.pos_kp.y, _x.pos_kp.z, _x.pos_ki.x, _x.pos_ki.y, _x.pos_ki.z, _x.vel_kd.x, _x.vel_kd.y, _x.vel_kd.z, _x.hard_limit_vel, _x.hard_limit_accel, _x.hard_limit_omega, _x.hard_limit_alpha, _x.speed,) = _get_struct_B7f18d4fB().unpack(str[start:end])
      self.control_enabled = bool(self.control_enabled)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B7f18d4fB().pack(_x.control_enabled, _x.collision_radius, _x.tolerance_pos_endpoint, _x.tolerance_pos, _x.tolerance_vel, _x.tolerance_att, _x.tolerance_omega, _x.tolerance_time, _x.att_kp.x, _x.att_kp.y, _x.att_kp.z, _x.att_ki.x, _x.att_ki.y, _x.att_ki.z, _x.omega_kd.x, _x.omega_kd.y, _x.omega_kd.z, _x.pos_kp.x, _x.pos_kp.y, _x.pos_kp.z, _x.pos_ki.x, _x.pos_ki.y, _x.pos_ki.z, _x.vel_kd.x, _x.vel_kd.y, _x.vel_kd.z, _x.hard_limit_vel, _x.hard_limit_accel, _x.hard_limit_omega, _x.hard_limit_alpha, _x.speed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.att_kp is None:
        self.att_kp = geometry_msgs.msg.Vector3()
      if self.att_ki is None:
        self.att_ki = geometry_msgs.msg.Vector3()
      if self.omega_kd is None:
        self.omega_kd = geometry_msgs.msg.Vector3()
      if self.pos_kp is None:
        self.pos_kp = geometry_msgs.msg.Vector3()
      if self.pos_ki is None:
        self.pos_ki = geometry_msgs.msg.Vector3()
      if self.vel_kd is None:
        self.vel_kd = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 190
      (_x.control_enabled, _x.collision_radius, _x.tolerance_pos_endpoint, _x.tolerance_pos, _x.tolerance_vel, _x.tolerance_att, _x.tolerance_omega, _x.tolerance_time, _x.att_kp.x, _x.att_kp.y, _x.att_kp.z, _x.att_ki.x, _x.att_ki.y, _x.att_ki.z, _x.omega_kd.x, _x.omega_kd.y, _x.omega_kd.z, _x.pos_kp.x, _x.pos_kp.y, _x.pos_kp.z, _x.pos_ki.x, _x.pos_ki.y, _x.pos_ki.z, _x.vel_kd.x, _x.vel_kd.y, _x.vel_kd.z, _x.hard_limit_vel, _x.hard_limit_accel, _x.hard_limit_omega, _x.hard_limit_alpha, _x.speed,) = _get_struct_B7f18d4fB().unpack(str[start:end])
      self.control_enabled = bool(self.control_enabled)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B7f18d4fB = None
def _get_struct_B7f18d4fB():
    global _struct_B7f18d4fB
    if _struct_B7f18d4fB is None:
        _struct_B7f18d4fB = struct.Struct("<B7f18d4fB")
    return _struct_B7f18d4fB

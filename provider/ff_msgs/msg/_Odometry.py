# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ff_msgs/Odometry.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg

class Odometry(genpy.Message):
  _md5sum = "422b88b6dc476361c3b1485e5b6113f4"
  _type = "ff_msgs/Odometry"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Copyright (c) 2017, United States Government, as represented by the
# Administrator of the National Aeronautics and Space Administration.
#
# All rights reserved.
#
# The Astrobee platform is licensed under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with the
# License. You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#

time source_time 
time target_time
geometry_msgs/PoseWithCovariance sensor_F_source_T_target
geometry_msgs/PoseWithCovariance body_F_source_T_target

================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['source_time','target_time','sensor_F_source_T_target','body_F_source_T_target']
  _slot_types = ['time','time','geometry_msgs/PoseWithCovariance','geometry_msgs/PoseWithCovariance']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       source_time,target_time,sensor_F_source_T_target,body_F_source_T_target

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Odometry, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.source_time is None:
        self.source_time = genpy.Time()
      if self.target_time is None:
        self.target_time = genpy.Time()
      if self.sensor_F_source_T_target is None:
        self.sensor_F_source_T_target = geometry_msgs.msg.PoseWithCovariance()
      if self.body_F_source_T_target is None:
        self.body_F_source_T_target = geometry_msgs.msg.PoseWithCovariance()
    else:
      self.source_time = genpy.Time()
      self.target_time = genpy.Time()
      self.sensor_F_source_T_target = geometry_msgs.msg.PoseWithCovariance()
      self.body_F_source_T_target = geometry_msgs.msg.PoseWithCovariance()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4I7d().pack(_x.source_time.secs, _x.source_time.nsecs, _x.target_time.secs, _x.target_time.nsecs, _x.sensor_F_source_T_target.pose.position.x, _x.sensor_F_source_T_target.pose.position.y, _x.sensor_F_source_T_target.pose.position.z, _x.sensor_F_source_T_target.pose.orientation.x, _x.sensor_F_source_T_target.pose.orientation.y, _x.sensor_F_source_T_target.pose.orientation.z, _x.sensor_F_source_T_target.pose.orientation.w))
      buff.write(_get_struct_36d().pack(*self.sensor_F_source_T_target.covariance))
      _x = self
      buff.write(_get_struct_7d().pack(_x.body_F_source_T_target.pose.position.x, _x.body_F_source_T_target.pose.position.y, _x.body_F_source_T_target.pose.position.z, _x.body_F_source_T_target.pose.orientation.x, _x.body_F_source_T_target.pose.orientation.y, _x.body_F_source_T_target.pose.orientation.z, _x.body_F_source_T_target.pose.orientation.w))
      buff.write(_get_struct_36d().pack(*self.body_F_source_T_target.covariance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.source_time is None:
        self.source_time = genpy.Time()
      if self.target_time is None:
        self.target_time = genpy.Time()
      if self.sensor_F_source_T_target is None:
        self.sensor_F_source_T_target = geometry_msgs.msg.PoseWithCovariance()
      if self.body_F_source_T_target is None:
        self.body_F_source_T_target = geometry_msgs.msg.PoseWithCovariance()
      end = 0
      _x = self
      start = end
      end += 72
      (_x.source_time.secs, _x.source_time.nsecs, _x.target_time.secs, _x.target_time.nsecs, _x.sensor_F_source_T_target.pose.position.x, _x.sensor_F_source_T_target.pose.position.y, _x.sensor_F_source_T_target.pose.position.z, _x.sensor_F_source_T_target.pose.orientation.x, _x.sensor_F_source_T_target.pose.orientation.y, _x.sensor_F_source_T_target.pose.orientation.z, _x.sensor_F_source_T_target.pose.orientation.w,) = _get_struct_4I7d().unpack(str[start:end])
      start = end
      end += 288
      self.sensor_F_source_T_target.covariance = _get_struct_36d().unpack(str[start:end])
      _x = self
      start = end
      end += 56
      (_x.body_F_source_T_target.pose.position.x, _x.body_F_source_T_target.pose.position.y, _x.body_F_source_T_target.pose.position.z, _x.body_F_source_T_target.pose.orientation.x, _x.body_F_source_T_target.pose.orientation.y, _x.body_F_source_T_target.pose.orientation.z, _x.body_F_source_T_target.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 288
      self.body_F_source_T_target.covariance = _get_struct_36d().unpack(str[start:end])
      self.source_time.canon()
      self.target_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4I7d().pack(_x.source_time.secs, _x.source_time.nsecs, _x.target_time.secs, _x.target_time.nsecs, _x.sensor_F_source_T_target.pose.position.x, _x.sensor_F_source_T_target.pose.position.y, _x.sensor_F_source_T_target.pose.position.z, _x.sensor_F_source_T_target.pose.orientation.x, _x.sensor_F_source_T_target.pose.orientation.y, _x.sensor_F_source_T_target.pose.orientation.z, _x.sensor_F_source_T_target.pose.orientation.w))
      buff.write(self.sensor_F_source_T_target.covariance.tostring())
      _x = self
      buff.write(_get_struct_7d().pack(_x.body_F_source_T_target.pose.position.x, _x.body_F_source_T_target.pose.position.y, _x.body_F_source_T_target.pose.position.z, _x.body_F_source_T_target.pose.orientation.x, _x.body_F_source_T_target.pose.orientation.y, _x.body_F_source_T_target.pose.orientation.z, _x.body_F_source_T_target.pose.orientation.w))
      buff.write(self.body_F_source_T_target.covariance.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.source_time is None:
        self.source_time = genpy.Time()
      if self.target_time is None:
        self.target_time = genpy.Time()
      if self.sensor_F_source_T_target is None:
        self.sensor_F_source_T_target = geometry_msgs.msg.PoseWithCovariance()
      if self.body_F_source_T_target is None:
        self.body_F_source_T_target = geometry_msgs.msg.PoseWithCovariance()
      end = 0
      _x = self
      start = end
      end += 72
      (_x.source_time.secs, _x.source_time.nsecs, _x.target_time.secs, _x.target_time.nsecs, _x.sensor_F_source_T_target.pose.position.x, _x.sensor_F_source_T_target.pose.position.y, _x.sensor_F_source_T_target.pose.position.z, _x.sensor_F_source_T_target.pose.orientation.x, _x.sensor_F_source_T_target.pose.orientation.y, _x.sensor_F_source_T_target.pose.orientation.z, _x.sensor_F_source_T_target.pose.orientation.w,) = _get_struct_4I7d().unpack(str[start:end])
      start = end
      end += 288
      self.sensor_F_source_T_target.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      _x = self
      start = end
      end += 56
      (_x.body_F_source_T_target.pose.position.x, _x.body_F_source_T_target.pose.position.y, _x.body_F_source_T_target.pose.position.z, _x.body_F_source_T_target.pose.orientation.x, _x.body_F_source_T_target.pose.orientation.y, _x.body_F_source_T_target.pose.orientation.z, _x.body_F_source_T_target.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 288
      self.body_F_source_T_target.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      self.source_time.canon()
      self.target_time.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
_struct_4I7d = None
def _get_struct_4I7d():
    global _struct_4I7d
    if _struct_4I7d is None:
        _struct_4I7d = struct.Struct("<4I7d")
    return _struct_4I7d
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d

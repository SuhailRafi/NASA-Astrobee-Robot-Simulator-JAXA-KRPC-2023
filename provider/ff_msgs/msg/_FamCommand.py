# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from ff_msgs/FamCommand.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class FamCommand(genpy.Message):
  _md5sum = "baf174131dee1a8b03d9d5feac8aa809"
  _type = "ff_msgs/FamCommand"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# Copyright (c) 2017, United States Government, as represented by the
# Administrator of the National Aeronautics and Space Administration.
# 
# All rights reserved.
# 
# The Astrobee platform is licensed under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with the
# License. You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.
#
# Command sent from control to the FAM.

std_msgs/Header header # header with time stamp

# force and torque
geometry_msgs/Wrench wrench
# linear acceleration (wrench w/out estimated mass)
geometry_msgs/Vector3 accel
# angular accceleration (wrench w/out estimated mass)
geometry_msgs/Vector3 alpha

# status byte from GNC ICD
uint8 status

# position error
geometry_msgs/Vector3 position_error
# integrated position error
geometry_msgs/Vector3 position_error_integrated

# attitude error
geometry_msgs/Vector3 attitude_error
# integrated attitude error
geometry_msgs/Vector3 attitude_error_integrated
# magnitude of attitude error
float32 attitude_error_mag

# control mode from GNC ICD
uint8 control_mode


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Wrench
# This represents force in free space, separated into
# its linear and angular parts.
Vector3  force
Vector3  torque

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['header','wrench','accel','alpha','status','position_error','position_error_integrated','attitude_error','attitude_error_integrated','attitude_error_mag','control_mode']
  _slot_types = ['std_msgs/Header','geometry_msgs/Wrench','geometry_msgs/Vector3','geometry_msgs/Vector3','uint8','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','float32','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,wrench,accel,alpha,status,position_error,position_error_integrated,attitude_error,attitude_error_integrated,attitude_error_mag,control_mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FamCommand, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.wrench is None:
        self.wrench = geometry_msgs.msg.Wrench()
      if self.accel is None:
        self.accel = geometry_msgs.msg.Vector3()
      if self.alpha is None:
        self.alpha = geometry_msgs.msg.Vector3()
      if self.status is None:
        self.status = 0
      if self.position_error is None:
        self.position_error = geometry_msgs.msg.Vector3()
      if self.position_error_integrated is None:
        self.position_error_integrated = geometry_msgs.msg.Vector3()
      if self.attitude_error is None:
        self.attitude_error = geometry_msgs.msg.Vector3()
      if self.attitude_error_integrated is None:
        self.attitude_error_integrated = geometry_msgs.msg.Vector3()
      if self.attitude_error_mag is None:
        self.attitude_error_mag = 0.
      if self.control_mode is None:
        self.control_mode = 0
    else:
      self.header = std_msgs.msg.Header()
      self.wrench = geometry_msgs.msg.Wrench()
      self.accel = geometry_msgs.msg.Vector3()
      self.alpha = geometry_msgs.msg.Vector3()
      self.status = 0
      self.position_error = geometry_msgs.msg.Vector3()
      self.position_error_integrated = geometry_msgs.msg.Vector3()
      self.attitude_error = geometry_msgs.msg.Vector3()
      self.attitude_error_integrated = geometry_msgs.msg.Vector3()
      self.attitude_error_mag = 0.
      self.control_mode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_12dB12dfB().pack(_x.wrench.force.x, _x.wrench.force.y, _x.wrench.force.z, _x.wrench.torque.x, _x.wrench.torque.y, _x.wrench.torque.z, _x.accel.x, _x.accel.y, _x.accel.z, _x.alpha.x, _x.alpha.y, _x.alpha.z, _x.status, _x.position_error.x, _x.position_error.y, _x.position_error.z, _x.position_error_integrated.x, _x.position_error_integrated.y, _x.position_error_integrated.z, _x.attitude_error.x, _x.attitude_error.y, _x.attitude_error.z, _x.attitude_error_integrated.x, _x.attitude_error_integrated.y, _x.attitude_error_integrated.z, _x.attitude_error_mag, _x.control_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.wrench is None:
        self.wrench = geometry_msgs.msg.Wrench()
      if self.accel is None:
        self.accel = geometry_msgs.msg.Vector3()
      if self.alpha is None:
        self.alpha = geometry_msgs.msg.Vector3()
      if self.position_error is None:
        self.position_error = geometry_msgs.msg.Vector3()
      if self.position_error_integrated is None:
        self.position_error_integrated = geometry_msgs.msg.Vector3()
      if self.attitude_error is None:
        self.attitude_error = geometry_msgs.msg.Vector3()
      if self.attitude_error_integrated is None:
        self.attitude_error_integrated = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 198
      (_x.wrench.force.x, _x.wrench.force.y, _x.wrench.force.z, _x.wrench.torque.x, _x.wrench.torque.y, _x.wrench.torque.z, _x.accel.x, _x.accel.y, _x.accel.z, _x.alpha.x, _x.alpha.y, _x.alpha.z, _x.status, _x.position_error.x, _x.position_error.y, _x.position_error.z, _x.position_error_integrated.x, _x.position_error_integrated.y, _x.position_error_integrated.z, _x.attitude_error.x, _x.attitude_error.y, _x.attitude_error.z, _x.attitude_error_integrated.x, _x.attitude_error_integrated.y, _x.attitude_error_integrated.z, _x.attitude_error_mag, _x.control_mode,) = _get_struct_12dB12dfB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_12dB12dfB().pack(_x.wrench.force.x, _x.wrench.force.y, _x.wrench.force.z, _x.wrench.torque.x, _x.wrench.torque.y, _x.wrench.torque.z, _x.accel.x, _x.accel.y, _x.accel.z, _x.alpha.x, _x.alpha.y, _x.alpha.z, _x.status, _x.position_error.x, _x.position_error.y, _x.position_error.z, _x.position_error_integrated.x, _x.position_error_integrated.y, _x.position_error_integrated.z, _x.attitude_error.x, _x.attitude_error.y, _x.attitude_error.z, _x.attitude_error_integrated.x, _x.attitude_error_integrated.y, _x.attitude_error_integrated.z, _x.attitude_error_mag, _x.control_mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.wrench is None:
        self.wrench = geometry_msgs.msg.Wrench()
      if self.accel is None:
        self.accel = geometry_msgs.msg.Vector3()
      if self.alpha is None:
        self.alpha = geometry_msgs.msg.Vector3()
      if self.position_error is None:
        self.position_error = geometry_msgs.msg.Vector3()
      if self.position_error_integrated is None:
        self.position_error_integrated = geometry_msgs.msg.Vector3()
      if self.attitude_error is None:
        self.attitude_error = geometry_msgs.msg.Vector3()
      if self.attitude_error_integrated is None:
        self.attitude_error_integrated = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 198
      (_x.wrench.force.x, _x.wrench.force.y, _x.wrench.force.z, _x.wrench.torque.x, _x.wrench.torque.y, _x.wrench.torque.z, _x.accel.x, _x.accel.y, _x.accel.z, _x.alpha.x, _x.alpha.y, _x.alpha.z, _x.status, _x.position_error.x, _x.position_error.y, _x.position_error.z, _x.position_error_integrated.x, _x.position_error_integrated.y, _x.position_error_integrated.z, _x.attitude_error.x, _x.attitude_error.y, _x.attitude_error.z, _x.attitude_error_integrated.x, _x.attitude_error_integrated.y, _x.attitude_error_integrated.z, _x.attitude_error_mag, _x.control_mode,) = _get_struct_12dB12dfB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12dB12dfB = None
def _get_struct_12dB12dfB():
    global _struct_12dB12dfB
    if _struct_12dB12dfB is None:
        _struct_12dB12dfB = struct.Struct("<12dB12dfB")
    return _struct_12dB12dfB
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
